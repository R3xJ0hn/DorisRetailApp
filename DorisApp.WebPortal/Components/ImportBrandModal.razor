@using System.Collections.ObjectModel;
@using System.Text;
@using DorisApp.WebPortal.Model;
@inject IJSRuntime JSRuntime
@inject BrandEndpoint BrandEndpoint
@inject ExcelConnector ExcelConnector

<div class="import-modal modal fade" id="importBrandModal" data-bs-backdrop="static" data-bs-keyboard="false"
     tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h1 class="modal-title fs-5 text-primary" id="staticBackdropLabel">Import Excel File</h1>
                <button type="button" class="btn-close" @onclick="Reset" disabled="@(!allowedToCloseModal)"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="carousel slide no-gutters" data-bs-interval="false" id="importBrandSlide">

                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <div class="modal-body row ">

                                <div class="col-md ">

                                    <h5>
                                        To import an <span class="text-success">Excel file</span>, please follow
                                        these steps:
                                    </h5>

                                    <ol>
                                        <li>
                                            Click the <b>'Choose File'</b> button below and select your Excel file.
                                        </li>

                                        <li>
                                            The first row should contain the header information for each category.
                                            For example, you can have column headers like "Category 1", "Category 2", etc.
                                            These headers will be used as the category names in the Category objects.
                                        </li>

                                        <li>
                                            Below the header row, in each column, you can add the subcategories for each category.
                                            Each cell should contain one subcategory entry. You can have multiple subcategories
                                            in each column, separated by rows.
                                        </li>

                                        <li>
                                            Click the <b>'Proceed'</b> button to proceed with the import
                                            process.
                                        </li>
                                    </ol>


                                </div>


                                <div class="col-sm">

                                    <div class="mb-3">
                                        <img src="/img/Category-Spreadsheet.png" alt="Spreadsheet">
                                    </div>

                                    <div class="mb-3">
                                        <label for="formFile" class="form-label">Upload Files</label>

                                        <InputFile OnChange="LoadFiles" class="form-control " multiple
                                                   accept=".jpg, .jpeg, .png, .gif, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />

                                        <div class="form-validation @(isValidatedField ? "d-none" : "")">
                                            Please select an excel file.
                                        </div>

                                    </div>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal" @onclick="Reset">
                                    Close
                                </button>

                                <button type="button" class="btn btn-primary proceed-btn"
                                        @onclick="OnProcessItemsAsync">
                                    Proceed

                                </button>
                            </div>
                        </div>

                        <div class="carousel-item import-status">
                            <div class="modal-body">

                                <div class="verify-item">
                                    <p>Verifying: @statusVerificationMessage</p>
                                    <div class="progress">

                                        <div class="progress-bar
                                             @(statusVerificationPercentage != 100? "progress-bar-striped progress-bar-animated" : "")"
                                             role="progressbar"
                                             style="width: @statusVerificationPercentage%;"
                                             aria-valuenow="@statusVerificationPercentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                            @statusVerificationPercentage%
                                        </div>

                                    </div>
                                </div>


                                <div class="upload-item">
                                    <p>Uploading: @statusUploadMessage</p>
                                    <div class="progress">

                                        <div class="progress-bar
                                            @(statusUploadPercentage != 100? "progress-bar-striped progress-bar-animated" : "")"
                                             role="progressbar"
                                             style="width: @statusUploadPercentage%;"
                                             aria-valuenow="@statusUploadPercentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                            @statusUploadPercentage%
                                        </div>

                                    </div>

                                </div>


                                <div class="status-list">
                                    Status:
                                    @if (Warnings.Count > 0)
                                    {
                                        <span class="badge rounded-pill bg-danger">@Warnings.Count</span>
                                    }
                                    <ul id="importBrandSatus">

                                        @foreach (var item in StatusReports)
                                        {
                                            @if (item.Type == "Image")
                                            {
                                                <li>
                                                    <img src="@item.ImgString" alt="unverified">
                                                    <div class="stat-details">
                                                        <p>@item.ModelName</p>
                                                        <p class="@(item.Status.Contains("Error")? "text-danger" : "" )
                                                                @(item.Status.Contains("Warning")? "text-warning" : "" )
                                                                @(item.Status.Contains("Success")? "text-success" : "" ) ">
                                                            @item.Status
                                                        </p>
                                                    </div>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="@(item.Status.Contains("Error")? "text-danger" : "" )
                                                        @(item.Status.Contains("Warning")? "text-warning" : "" )
                                                        @(item.Status.Contains("Success")? "text-success" : "" ) ">
                                                    @item.Status
                                                </li>
                                            }

                                        }

                                    </ul>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-bs-target="#importSlide"
                                        data-bs-slide-to="0" data-bs-dismiss="modal" disabled="@(!allowedToCloseModal)"
                                        @onclick="Reset">
                                    Done
                                </button>
                            </div>
                        </div>
                    
                    </div>
                </div>

            </div>

            <div class="error-warning @(Warnings.Count > 0 && openWarningPanel? "" : "d-none")">
                <div class="body">
                    <h2>Warnings:</h2>
                    <ul>

                        @foreach (var item in Warnings)
                        {
                            <li>@item</li>
                        }

                    </ul>

                    <div class="footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Reset">
                            Close
                        </button>

                        <button type="button" class="btn btn-primary proceed-btn" @onclick="OnProceedUpload">
                            Continue anyway
                        </button>

                    </div>
                </div>

            </div>


        </div>
    </div>
</div>


@code {
    private MemoryStream excelFileStream = new();
    private List<IBrowserFile> Files = new();
    private List<BrandModel> brands = new();

    private ObservableCollection<ImportStatusModel> StatusReports = new();
    private ObservableCollection<string> Warnings = new();

    private string? statusVerificationMessage;
    private int statusVerificationPercentage;
    private string? statusUploadMessage;
    private int statusUploadPercentage;

    private int maxFileSize = 1024 * 1024; // 1 MB in bytes
    CancellationTokenSource ctsUpload = new();

    private bool isValidatedField = true;
    private bool openWarningPanel = false;
    private bool allowedToUpload = true;
    private bool allowedToCloseModal = true;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        await Reset();

        foreach (var file in e.GetMultipleFiles(int.MaxValue))
        {
            if (Path.GetExtension(file.Name) == ".xlsx")
            {
                await file.OpenReadStream(long.MaxValue).CopyToAsync(excelFileStream);
            }
            else
            {
                Files.Add(file);
            }
        }

        await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importBrandModal");
    }

    private async Task OnProcessItemsAsync()
    {
        if (excelFileStream.Length > 0)
        {
            await JSRuntime.InvokeVoidAsync("ImportCarouselNext", "importBrandSlide");
            isValidatedField = true;

            //Wait for the carousel
            await Task.Delay(1000);

            statusVerificationMessage = "Processing worksheet...";
            StateHasChanged();

            allowedToCloseModal = false;
            brands = await ExcelConnector.RetrieveBrandsAsync(excelFileStream, ReportProgress);
            allowedToCloseModal = true;
            statusVerificationMessage = "";
            StateHasChanged();

            await VerifyImagesAsync();
            openWarningPanel = true;

            if (allowedToUpload == true)
            {
                await OnProceedUpload();
            }
        }
        else
        {
            isValidatedField = false;
        }
    }

    private async Task OnProceedUpload()
    {
        openWarningPanel = false;
        allowedToUpload = true;
        StateHasChanged();

        try
        {
            await UploadBrand(ctsUpload.Token);
        }
        catch (OperationCanceledException)
        {
            StatusReports.Add(new ImportStatusModel
                { Status = "Uploading brand was cancelled." });
        }
    }

    private void OnCancelToken()
    {
        ctsUpload.Cancel();
    }

    private async Task VerifyImagesAsync()
    {
        var processedPercentage = 1;
        var lastTaskVerifiedPercent = statusVerificationPercentage;

        foreach (var brand in brands)
        {
            processedPercentage++;
            statusVerificationMessage = $"Verifying {brand.BrandName} image";
            statusVerificationPercentage = lastTaskVerifiedPercent + ((processedPercentage * 50) / brands.Count);

            var statusReport = new ImportStatusModel
                {
                    ModelName = brand.BrandName,
                    Status = statusVerificationMessage,
                    Type = "Image"
                };

            var getImage = Files.SingleOrDefault(x => x.Name == brand.StoredImageName);

            if (getImage != null)
            {
                if (getImage.Size > maxFileSize)
                {
                    var msg = $"Error: Image for {brand.BrandName} exceed 1 MB | FileName: {brand.StoredImageName}";
                    statusReport.Status = msg;
                    statusReport.Type = "Error";
                    allowedToUpload = false;
                    Warnings.Add(msg);
                    Files.Remove(getImage);
                }
                else
                {
                    using (var stream = new MemoryStream())
                    {
                        await getImage.OpenReadStream(maxFileSize).CopyToAsync(stream).ConfigureAwait(false);
                        statusReport.ImgString = $"data:{getImage.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";
                    }
                    statusReport.Status = "Success: Verified Image!";
                }
            }
            else
            {
                var msg = $"Error: Image not found for {brand.BrandName} | FileName: {brand.StoredImageName}";
                statusReport.Status = msg;
                statusReport.Type = "Error";
                allowedToUpload = false;
                Warnings.Add(msg);
            }

            StatusReports.Add(statusReport);
            await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importBrandSatus").ConfigureAwait(false);
            StateHasChanged();
        }

        statusVerificationMessage = "";
    }

    private async Task UploadBrand(CancellationToken cancellationToken)
    {
        var processedPercentage = 0;

        await Task.Run(async () =>
        {
            await Task.WhenAll(brands.Select(async item =>
            {
                cancellationToken.ThrowIfCancellationRequested();

                var getImage = Files.SingleOrDefault(x => x.Name == item.StoredImageName);

                var result = await BrandEndpoint.AddBrandAsync(item, getImage?.OpenReadStream(maxFileSize), item.BrandName).ConfigureAwait(false);

                string statusUploadMessage;
                if (result!.IsSuccessStatusCode)
                {
                    statusUploadMessage = getImage != null ?
                        $"Success: Successfully uploaded {item.BrandName}" :
                        $"Warning: {item.BrandName} uploaded without an image";
                }
                else
                {
                    statusUploadMessage = $"Error: Unable to upload reason:{Environment.NewLine}{result.ReasonPhrase}";
                }

                StatusReports.Add(new ImportStatusModel { Status = statusUploadMessage });
                await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importBrandSatus");

                Interlocked.Increment(ref processedPercentage);
                statusUploadPercentage = (processedPercentage * 100) / brands.Count;

                StateHasChanged();
            }));
        });

        allowedToCloseModal = true;
    }

    private async Task ReportProgress(string task, int percent)
    {
        var statusReport = new ImportStatusModel
        {
            Status = task,
            Type = "Item"
        };

        statusVerificationMessage = task;
        statusVerificationPercentage = percent / 2;

        StatusReports.Add(statusReport);
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importBrandSatus");
    }

    private async Task Reset()
    {
        excelFileStream = new();
        Files = new();
        brands = new();
        Warnings = new();
        statusVerificationPercentage = 0;
        statusUploadPercentage = 0;
        isValidatedField = true;
        openWarningPanel = false;
        allowedToCloseModal = false;
        openWarningPanel = false;
        await JSRuntime.InvokeVoidAsync("ImportCarouselReset", "importBrandSlide");
    }

}