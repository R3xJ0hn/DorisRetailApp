@inject BrandEndpoint BrandEndpoint
@inject CategoryEndpoint CategoryEndpoint
@inject SubCategoryEndpoint SubCategoryEndpoint
@inject ProductEndpoint ProductEndpoint

<div class="container-fluid">

    <div class="card">

        <EditForm Model="@newProduct" OnInvalidSubmit="@OnSaveForm">
            <DataAnnotationsValidator />

            <div class="card-header">
                <div class="row">
                    <div class="col">
                        <h4 class="col card-title">Add Product</h4>
                    </div>

                    <div class="col">
                        <button id="openPanel1" class="btn btn-back" @onclick="BackClicked">
                            <i class="fa-solid fa-chevron-left"></i>
                            Back
                        </button>
                    </div>

                </div>
            </div>

            <div class="card-body">

                <div class="row">
                    <p class="col-8 card-description">
                        Add New Product to showcase your latest
                        merchandise and
                        attract more customers.
                    </p>
                    <div class="col-4">

                        <button type="button" class="btn btn-success import-btn" data-bs-toggle="modal"
                                data-bs-target="#productModal">
                            <i class="fa-regular fa-file-spreadsheet"></i>
                            Import File
                        </button>
                    </div>
                </div>

                <div class="row">

                    <div class="col-md">

                        <div class="col-sm">
                            <UploadImage OnFileChange="OnHandleFileChange" MaxFileSize="@maxFileSize" ImgSource="@imgSourceEdit" />
                        </div>

                        <div class="col-sm">
                            <div class="mb-3">
                                <label for="product-name" class="form-label has-validation">Product Name</label>
                                <InputText id="product-name" class="form-control" placeholder="Product Name"
                                           @bind-Value="newProduct.ProductName" required />
                                <ValidationMessage For="@(()=> newProduct.ProductName)" class="form-validation" />
                            </div>

                            <div class="mb-3">
                                <label for="product-sku" class="form-label">SKU</label>
                                <InputText id="product-sku" class="form-control" placeholder="SKU"
                                           @bind-Value="newProduct.Sku" required />
                                <ValidationMessage For="@(()=> newProduct.Sku)" class="form-validation" />
                            </div>
                        </div>

                    </div>

                    <div class="col-sm">
                        <div class="mb-3">
                            <label for="brand" class="form-label">Brand</label>
                            <InputSelect class="form-select"
                                         @bind-Value="newProduct.BrandId">

                                <option value="">-- Select Brand --</option>

                                @if (brandSummary != null)
                                {
                                    @foreach (var brand in brandSummary.Models)
                                    {
                                        <option value="@brand.Id">@(brand.BrandName)</option>
                                    }
                                }

                            </InputSelect>

                            <ValidationMessage For="@(()=> newProduct.BrandId)" class="form-validation" />

                        </div>

                        <div class="mb-3">
                            <label for="product-category" class="form-label">Category</label>
                            <InputSelect class="form-select" required
                                         Value="@newProduct.CategoryId"
                                         ValueChanged="@((int x) => OnCategoryValueChanged(x))"
                                         ValueExpression="@(() => newProduct.CategoryId)">

                                <option value="">-- Select Category --</option>

                                @if (categorySummary != null)
                                {
                                    @foreach (var category in categorySummary.Models)
                                    {
                                        <option value="@category.Id">@(category.CategoryName)</option>
                                    }
                                }

                            </InputSelect>

                            <ValidationMessage For="@(()=> newProduct.CategoryId)" class="form-validation" />

                        </div>

                        <div class="mb-3">
                            @{
                                var disabled = true;

                                @if (subCategoryModels != null && subCategoryModels.Count != 0)
                                {
                                    disabled = false;
                                }
                            }


                            <label for="product-subcategory" class="form-label">Sub Category</label>
                            <InputSelect class="form-select" id="product-subcategory"
                                         disabled="@disabled"
                                         @bind-Value="newProduct.SubcategoryId">

                                @if (subCategoryModels != null)
                                {
                                    @if (subCategoryModels.Count == 0)
                                    {
                                        <option value="" class="text-warning">
                                            No Sub Category Available
                                        </option>
                                    }
                                    else
                                    {
                                        <option value="">-- Select Sub Category --</option>
                                    }

                                    @foreach (var subCategory in subCategoryModels)
                                    {
                                        <option value="@subCategory.Id">
                                            @(subCategory.SubCategoryName)
                                        </option>
                                    }
                                }
                                else
                                {
                                    <option value="">Select a category first</option>
                                }

                            </InputSelect>
                        </div>
                    </div>

                    <div class="col-sm">

                        <div class="mb-3">
                            <label for="product-size" class="form-label">Size</label>
                            <InputText id="product-size" class="form-control"
                                       placeholder="Size" @bind-Value="newProduct.Size" required />
                            <ValidationMessage For="@(()=> newProduct.Size)" />
                        </div>

                        <div class="mb-3">
                            <label for="product-color" class="form-label">Color</label>
                            <InputText id="product-color" class="form-control"
                                       placeholder="Color" @bind-Value="newProduct.Color" />
                            <ValidationMessage For="@(()=> newProduct.Color)" />
                        </div>

                        @if (Mode == "edit")
                        {
                            <div class="form-check taxable-check">
                                <InputCheckbox id="isAvailable" class="form-check-input" @bind-Value="newProduct.IsAvailable" />
                                <label class="form-check-label" for="isAvailable">
                                    Set as Available
                                </label>
                                <p>
                                    NOTE: If you check the checkbox, it will be
                                    set as available now for purchase.
                                </p>
                            </div>
                        }

                        <div class="form-check taxable-check">
                            <InputCheckbox id="isTaxable" class="form-check-input" @bind-Value="newProduct.IsTaxable" />
                            <label class="form-check-label" for="isTaxable">
                                Set as <b class="text-danger">Taxable</b> product
                            </label>

                            <p>
                                NOTE: Please be advised that if you check the checkbox, a 12%
                                tax will be charged to the customer upon purchase.
                            </p>
                        </div>

                    </div>

                    <div class="mb-3">
                        <label for="exampleFormControlTextarea1" class="form-label">
                            Description
                        </label>
                        <InputTextArea class="form-control" @bind-Value="newProduct.Description" />
                    </div>

                </div>

            </div>

            <div class="card-footer text-end">
                <button class="btn btn-secondary">
                    Cancel
                </button>
                <button class="btn btn-primary" @onclick="OnSaveForm">
                    Save
                </button>
            </div>
        </EditForm>

    </div>

</div>



@code {
    private RequestModel<BrandSummaryDTO>? brandSummary;
    private RequestModel<CategorySummaryDTO>? categorySummary;
    private List<SubCategoryModel>? subCategoryModels;
    private RequestPageDTO brandRequestDTO = new();
    private RequestPageDTO categoryRequestDTO = new();
    private RequestPageDTO subCategoryRequestDTO = new();
    private ProductModel newProduct = new();
    long maxFileSize = 1024 * 1024;
    private string? imgSourceEdit;
    private Stream? imgStream;
    private string? imgName;

    private string errorMessage;

    [Parameter]
    public EventCallback OnBack { get; set; }

    [Parameter]
    public string Mode { get; set; }


    protected override async Task OnInitializedAsync()
    {
        //Pre Request to get the total items;
        brandRequestDTO.PageNo = 1;
        categoryRequestDTO = brandRequestDTO;
        subCategoryRequestDTO = brandRequestDTO;

        //Request to get all items in brand
        brandRequestDTO.ItemPerPage = await BrandEndpoint.CountBrandItems();
        brandSummary = await BrandEndpoint.GetBrandSummary(brandRequestDTO);

        //Request to get all items in Category
        brandRequestDTO.ItemPerPage = await CategoryEndpoint.CountCategoryItems();
        categorySummary = await CategoryEndpoint.GetCategorySummary(categoryRequestDTO);
    }

    private async Task OnCategoryValueChanged(int categoryId)
    {
        newProduct.CategoryId = categoryId;
        subCategoryModels = await SubCategoryEndpoint
        .GetSubCategorySummaryByCategoryId(categoryId);
    }

    private async Task OnHandleFileChange(InputFileChangeEventArgs e)
    {

    }

    private async Task OnSaveForm()
    {
        if (Mode == "add")
        {
            await AddProduct();
        }
        else if (Mode == "edit")
        {
            await EditProduct();
        }
    }



    private async Task AddProduct()
    {
        try
        {
            if (string.IsNullOrEmpty(newProduct.ProductName))
            {
                errorMessage = "Product name is required.";
                return;
            }

            if (string.IsNullOrEmpty(newProduct.Sku))
            {
                errorMessage = "Product sku is required.";
                return;
            }

            if (newProduct.CategoryId <= 0)
            {
                errorMessage = "Please select a category.";
                return;
            }

            if (string.IsNullOrEmpty(newProduct.Size))
            {
                errorMessage = "Product size is required.";
                return;
            }

            await ProductEndpoint.AddProductAsync(newProduct, imgStream, imgName);
            ShowToast("Successfully added new product.", "success");
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Failed to add new product: {ex.Message}";
        }
    }

    private async Task EditProduct()
    {

    }

    private void ShowToast(string message, string type)
    {

    }


    public async Task BackClicked()
    {
        await OnBack.InvokeAsync(null);
    }

}
