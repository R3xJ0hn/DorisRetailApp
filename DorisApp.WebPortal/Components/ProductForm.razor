@inject BrandEndpoint BrandEndpoint
@inject CategoryEndpoint CategoryEndpoint
@inject SubCategoryEndpoint SubCategoryEndpoint
@inject ProductEndpoint ProductEndpoint
@inject IJSRuntime JSRuntime
@inject IConfiguration Config


<div class="container-fluid">

    <div class="card">

        <EditForm Model="@productModel" OnInvalidSubmit="@OnSaveForm">
  
            <div class="card-header">
                <div class="row">
                    <div class="col">
                        <h4 class="col card-title">@mode Product</h4>
                    </div>

                    <div class="col">
                        <button type="button" id="openPanel1Btn" class="btn btn-back" @onclick="BackClicked">
                            <i class="fa-solid fa-chevron-left"></i>
                            Back
                        </button>
                    </div>

                </div>
            </div>

            <div class="card-body">

                <div class="row">
                    <p class="col-8 card-description">
                        Add New Product to showcase your latest
                        merchandise and
                        attract more customers.
                    </p>
                    <div class="col-4">

                        @*IMPORT BUTTON HERE*@

                    </div>
                </div>

                <div class="row">

                    <div class="col-md">

                        <div class="col-sm">

                    <UploadImage @ref="uploadImageComponentRef"
                                         OnFileChange="OnHandleFileChange" MaxFileSize="@maxFileSize"/>
                  
                        </div>

                        <div class="col-sm">
                            <div class="mb-3">
                                <label for="product-name" class="form-label has-validation">Product Name</label>
                                <InputText id="product-name" class="form-control" placeholder="Product Name"
                                           @bind-Value="productModel.ProductName"/>
                                <ValidationMessage For="@(()=> productModel.ProductName)" class="form-validation" />
                            </div>

                            <div class="mb-3">
                                <label for="product-sku" class="form-label">SKU</label>
                                <InputText id="product-sku" class="form-control" placeholder="SKU"
                                           @bind-Value="productModel.Sku" />
                                <ValidationMessage For="@(()=> productModel.Sku)" class="form-validation" />
                            </div>
                        </div>

                    </div>

                    <div class="col-sm">
                        <div class="mb-3">
                            <label for="brand" class="form-label">Brand</label>
                            <InputSelect class="form-select"
                                         @bind-Value="productModel.BrandId">

                                <option value="">-- Select Brand --</option>

                                @if (brandSummary != null)
                                {
                                    @foreach (var brand in brandSummary.Models)
                                    {
                                        <option value="@brand.Id">@(brand.BrandName)</option>
                                    }
                                }

                            </InputSelect>

                            <ValidationMessage For="@(()=> productModel.BrandId)" class="form-validation" />

                        </div>

                        <div class="mb-3">
                            <label for="product-category" class="form-label">Category</label>
                            <InputSelect class="form-select"
                                         Value="@productModel.CategoryId"
                                         ValueChanged="@((int x) => OnCategoryValueChanged(x))"
                                         ValueExpression="@(() => productModel.CategoryId)">

                                <option value="">-- Select Category --</option>

                                @if (categorySummary != null)
                                {
                                    @foreach (var category in categorySummary.Models)
                                    {
                                        <option value="@category.Id">@(category.CategoryName)</option>
                                    }
                                }

                            </InputSelect>

                            <ValidationMessage For="@(()=> productModel.CategoryId)" class="form-validation" />

                        </div>

                        <div class="mb-3">
                            @{
                                var disabled = true;

                                @if (subCategoryModels != null && subCategoryModels.Count != 0)
                                {
                                    disabled = false;
                                }
                            }

                            <label for="product-subcategory" class="form-label">Sub Category</label>
                            <InputSelect class="form-select" id="product-subcategory"
                                         disabled="@disabled"
                                         @bind-Value="productModel.SubCategoryId">

                                @if (subCategoryModels != null)
                                {
                                    @if (subCategoryModels.Count == 0)
                                    {
                                        <option value="" class="text-warning">
                                            No Sub Category Available
                                        </option>
                                    }
                                    else
                                    {
                                        <option value="1">-- Select Sub Category --</option>
                                    }

                                    @foreach (var subCategory in subCategoryModels)
                                    {
                                        <option value="@subCategory.Id">
                                            @(subCategory.SubCategoryName)
                                        </option>
                                    }
                                }
                                else
                                {
                                    <option value="">Select a category first</option>
                                }

                            </InputSelect>
                        </div>
                    </div>

                    <div class="col-sm">

                        <div class="mb-3">
                            <label for="product-size" class="form-label">Size/Weight</label>
                            <InputText id="product-size" class="form-control"
                                       placeholder="Size" @bind-Value="productModel.Size" />
                            <ValidationMessage For="@(()=> productModel.Size)" />
                        </div>

                        <div class="mb-3">
                            <label for="product-color" class="form-label">Color</label>
                            <InputText id="product-color" class="form-control"
                                       placeholder="Color" @bind-Value="productModel.Color" />
                            <ValidationMessage For="@(()=> productModel.Color)" />
                        </div>

                        @if (mode == "Edit")
                        {
                            <div class="form-check taxable-check">
                                <InputCheckbox id="isAvailable" class="form-check-input" @bind-Value="productModel.IsAvailable" />
                                <label class="form-check-label" for="isAvailable">
                                    Set as Available
                                </label>
                                <p>
                                    NOTE: If you check the checkbox, it will be
                                    set as available now for purchase.
                                </p>
                            </div>
                        }

                        <div class="form-check taxable-check">
                            <InputCheckbox id="isTaxable" class="form-check-input" @bind-Value="productModel.IsTaxable" />
                            <label class="form-check-label" for="isTaxable">
                                Set as <b class="text-danger">Taxable</b> product
                            </label>

                            <p>
                                NOTE: Please be advised that if you check the checkbox, a 12%
                                tax will be charged to the customer upon purchase.
                            </p>
                        </div>

                    </div>

                    <div class="mb-3">
                        <label for="exampleFormControlTextarea1" class="form-label">
                            Description
                        </label>
                        <InputTextArea class="form-control" @bind-Value="productModel.Description" />
                    </div>

                </div>

            </div>

            <div class="card-footer text-end">
                <button class="btn btn-secondary" @onclick="BackClicked">
                    Cancel
                </button>
                <button type="submit" class="btn btn-primary" @onclick="OnSaveForm">
                    Save
                </button>
            </div>
        </EditForm>

    </div>

</div>

<HttpErrorPopUp @ref="HttpErrorHandler" />

@code {
    private HttpErrorPopUp? HttpErrorHandler = new();
    private RequestModel<BrandSummaryDTO>? brandSummary;
    private RequestModel<CategorySummaryDTO>? categorySummary;
    private List<SubCategorySummaryDTO>? subCategoryModels;
    private RequestPageDTO brandRequestDTO = new();
    private RequestPageDTO categoryRequestDTO = new();
    private RequestPageDTO subCategoryRequestDTO = new();
    private ProductModel productModel = new();

    private UploadImage? uploadImageComponentRef = new();
    long maxFileSize = 1024 * 1024; // 1 MB in bytes
    private Stream? imgStream;
    private string? imgName;


    private string mode = string.Empty;
    private int productId;

    [Parameter]
    public EventCallback OnBack { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //Pre Request to get the total items;
        brandRequestDTO.PageNo = 1;
        categoryRequestDTO = brandRequestDTO;
        subCategoryRequestDTO = brandRequestDTO;

        //Request to get all items in brand
        brandRequestDTO.ItemPerPage = await BrandEndpoint.CountBrandItems();
        brandSummary = (await BrandEndpoint.GetBrandSummary(brandRequestDTO))?.Data;

        //Request to get all items in Category
        brandRequestDTO.ItemPerPage = await CategoryEndpoint.CountCategoryItems();
        categorySummary = (await CategoryEndpoint.GetCategorySummary(categoryRequestDTO))?.Data;
    }

    private async Task OnCategoryValueChanged(int categoryId)
    {
        productModel.CategoryId = categoryId;
        await UpdateSubCategory(categoryId);
    }

    private async Task UpdateSubCategory(int categoryId)
    {
        subCategoryModels = (await SubCategoryEndpoint
       .GetSubCategorySummaryByCategoryId(categoryId))?.Data;
        StateHasChanged();
    }

    private async Task OnHandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            imgName = e.File.Name;
            imgStream = e.File.OpenReadStream(maxFileSize);
        }
        catch (Exception)
        {
            if (uploadImageComponentRef != null)
            { await uploadImageComponentRef.RemoveActiveImage(); }
            StateHasChanged();
        }
    }

    public void AddNewProduct()
    {
        mode = "Add";
    }

    public async Task EditProduct(int Id)
    {
        mode = "Edit";
        productId = Id;

        var getModel = (await ProductEndpoint.GetById(productId))?.Data;

        if (getModel != null)
        {
            productModel = getModel;
            await UpdateSubCategory(getModel.CategoryId);
            StateHasChanged();

            var url = Config["URL:apiUrl"]
             + "/api/file/get/product/" + getModel.StoredImageName;
            if (uploadImageComponentRef != null)
            {await uploadImageComponentRef.SetActiveImage(url);}
        }
    }

    private async Task OnSaveForm()
    {
        bool validated = await ValidateProduct(productModel);
        if (!validated) return;

        if (mode == "Add")
        {
            var result = await ProductEndpoint.AddProductAsync(productModel, imgStream, imgName);

            if (result.IsSuccessStatusCode)
            {
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("SavedAlert", "Product", productModel.ProductName);
                ClearData();
            }

            if (HttpErrorHandler != null)
            await HttpErrorHandler.HandleHttpErrors<List<ProductSummaryDTO>>(result);

        }

        if (mode == "Edit")
        {
            var result = await ProductEndpoint.UpdateProduct(productModel, imgStream, imgName);

            if (result.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("SuccessToast",$"Succesfully update {productModel.ProductName}");
                await BackClicked();
            }

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<List<ProductSummaryDTO>>(result);
        }
    }

    private void ClearData()
    {
        productModel.ProductName = "";
        productModel.Sku = "";
        productModel.BrandId = 0;
        productModel.CategoryId = 0;
        productModel.SubCategoryId = 0;
        productModel.Size = "";
        productModel.Color = "";
        productModel.IsAvailable = false;
        productModel.IsTaxable = false;
        productModel.Description = "";

        if (uploadImageComponentRef != null)
        Task.Run(() => uploadImageComponentRef.RemoveActiveImage());
       
        StateHasChanged();
    }

    public async Task BackClicked()
    {
        ClearData();
        await OnBack.InvokeAsync(null);
    }

    public async Task<bool> ValidateProduct(ProductModel product)
    {
        string errorMessage;
        if (string.IsNullOrEmpty(product.ProductName))
        {
            errorMessage = "Product name is required.";
            await JSRuntime.InvokeVoidAsync("WarningToast",errorMessage);
            return false;
        }

        if (string.IsNullOrEmpty(product.Sku))
        {
            errorMessage = "Product sku is required.";
            await JSRuntime.InvokeVoidAsync("WarningToast",errorMessage);
            return false;
        }

        if (productModel.CategoryId <= 0)
        {
            errorMessage = "Please select a category.";
            await JSRuntime.InvokeVoidAsync("WarningToast",errorMessage);
            return false;
        }
        
        if (string.IsNullOrEmpty(product.Size))
        {
            errorMessage = "Product size is required.";
            await JSRuntime.InvokeVoidAsync("WarningToast",errorMessage);
            return false;
        }

        return true;
    }

}
