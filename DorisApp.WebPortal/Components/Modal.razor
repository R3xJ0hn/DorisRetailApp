@inject IJSRuntime JSRuntime


<div class="modal fade" id="@modalId" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5 text-primary" id="staticBackdropLabel">@Title</h5>
                <button type="button" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                @ChildContent
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="OnClose">Cancel</button>
                <button id="saveButton" type="button" class="btn btn-primary proceed-btn" @onclick="OnSaveClicked">
                    <span class="spinner-border spinner-border-sm d-none" role="status"
                        aria-hidden="true"></span>
                    @SaveButtonText
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string SaveButtonText { get; set; } = "Save";

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public string modalId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("modalProcessing");
            await JSRuntime.InvokeVoidAsync("modalProcessDone");
        }
    }

    private async Task OnSaveClicked()
    {
        await JSRuntime.InvokeVoidAsync("modalProcessing");
        await OnSave.InvokeAsync(null);
    }


}
