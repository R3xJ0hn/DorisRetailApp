@using DorisApp.WebPortal.Model;
@using System.Collections.ObjectModel;
@using System.Text;
@inject IJSRuntime JSRuntime
@inject ExcelConnector ExcelConnector
@inject BrandEndpoint BrandEndpoint
@inject ProductEndpoint ProductEndpoint
@inject BrandEndpoint BrandEndpoint
@inject CategoryEndpoint CategoryEndpoint
@inject SubCategoryEndpoint SubCategoryEndpoint

<div class="import-modal modal fade" id="ImportProductModal" data-bs-backdrop="static" data-bs-keyboard="false"
     tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h1 class="modal-title fs-5 text-primary" id="staticBackdropLabel">Import Excel File</h1>
                <button type="button" class="btn-close" @onclick="Reset" disabled="@(!allowedToCloseModal)"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="carousel slide no-gutters" data-bs-interval="false" id="importProductSlide">

                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <div class="modal-body row ">

                                <div class="col-md ">

                                    <h5>
                                        To import an <span class="text-success">Excel file</span>, please follow
                                        these steps:
                                    </h5>

                                    <ol>

                                        <li>
                                            Click the <b>'Choose File'</b> button below and select your Excel file.
                                        </li>

                                        <li>
                                            Check the file if your first row contains the following column names:

                                            <div class="row my-0">

                                                <ul class="col my-0">
                                                    <li>Product Name</li>
                                                    <li>SKU</li>
                                                    <li>Brand</li>
                                                    <li>Category</li>
                                                    <li>Sub Category</li>
                                                </ul>

                                                <ul class="col">
                                                    <li>Size</li>
                                                    <li>Color</li>
                                                    <li>Description</li>
                                                    <li>Image Path</li>
                                                </ul>
                                            </div>

                                        </li>

                                        <li>
                                            Please ensure that the images are place in the same
                                            directory with the excel file.
                                        </li>

                                        <li>
                                            Click the <b>'Proceed'</b> button to proceed with the import
                                            process.
                                        </li>

                                    </ol>

                                </div>


                                <div class="col-sm">

                                    <div class="mb-3">
                                        <img src="/img/Category-Spreadsheet.png" alt="Spreadsheet">
                                    </div>

                                    <div class="mb-3">
                                        <label for="formFile" class="form-label">Upload Files</label>

                                        <InputFile OnChange="LoadFiles" class="form-control " multiple
                                                   accept=".jpg, .jpeg, .png, .gif, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />

                                        <div class="form-validation @(isValidatedField ? "d-none" : "")">
                                            Please select an excel file.
                                        </div>

                                    </div>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal" @onclick="Reset">
                                    Close
                                </button>


                                <button type="button" class="btn btn-primary proceed-btn"
                                        @onclick="OnProcessItemsAsync">
                                    Proceed

                                </button>
                            </div>
                        </div>

                        <div class="carousel-item import-status">
                            <div class="modal-body">

                                <div class="verify-item">
                                    <p>Verifying: @statusVerificationMessage</p>
                                    <div class="progress">

                                        <div class="progress-bar
                                             @(statusVerificationPercentage != 100? "progress-bar-striped progress-bar-animated" : "")"
                                             role="progressbar"
                                             style="width: @statusVerificationPercentage%;"
                                             aria-valuenow="@statusVerificationPercentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                            @statusVerificationPercentage%
                                        </div>

                                    </div>
                                </div>

                                <div class="upload-item">
                                    <p>Uploading: @statusUploadMessage</p>
                                    <div class="progress">

                                        <div class="progress-bar
                                            @(statusUploadPercentage != 100? "progress-bar-striped progress-bar-animated" : "")"
                                             role="progressbar"
                                             style="width: @statusUploadPercentage%;"
                                             aria-valuenow="@statusUploadPercentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                            @statusUploadPercentage%
                                        </div>

                                    </div>

                                </div>
                         
                                <div class="status-list">
                                    Status:
                                    @if (Warnings.Count > 0)
                                    {
                                        <span class="badge rounded-pill bg-danger">@Warnings.Count</span>
                                    }
                                    <ul id="importProductSatus">

                                        @foreach (var item in StatusReports)
                                        {
                                            @if (item.Type == "Image")
                                            {
                                                <li>
                                                    <img src="@item.ImgString" alt="unverified">
                                                    <div class="stat-details">
                                                        <p>@item.ModelName</p>
                                                        <p class="@(item.Status.Contains("Error")? "text-danger" : "" )
                                                                @(item.Status.Contains("Warning")? "text-warning" : "" )
                                                                @(item.Status.Contains("Success")? "text-success" : "" ) ">
                                                            @item.Status
                                                        </p>
                                                    </div>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="@(item.Status.Contains("Error")? "text-danger" : "" )
                                                        @(item.Status.Contains("Warning")? "text-warning" : "" )
                                                        @(item.Status.Contains("Success")? "text-success" : "" ) ">
                                                    @item.Status
                                                </li>
                                            }

                                        }

                                    </ul>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-bs-target="#importSlide"
                                        data-bs-slide-to="0" data-bs-dismiss="modal" disabled="@(!allowedToCloseModal)"
                                        @onclick="Reset">
                                    Done
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

            <div class="error-warning @(Warnings.Count > 0 && openWarningPanel? "" : "d-none")">
                <div class="body">
                    <h2>
                        Warnings:
                        @if (Warnings.Count > 0)
                        {
                            <span class="badge rounded-pill bg-danger">@Warnings.Count</span>
                        }
                    </h2>
                    <ul>

                        @foreach (var item in Warnings)
                        {
                            <li>@item</li>
                        }

                    </ul>

                    <div class="footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Reset">
                            Close
                        </button>

                        <button type="button" class="btn btn-primary proceed-btn" @onclick="OnProceedUpload">
                            Continue anyway
                        </button>

                    </div>
                </div>

            </div>


        </div>
    </div>
</div>


@code {
    private MemoryStream excelFileStream = new();
    private List<IBrowserFile> Files = new();
    private List<ProductModel> products = new();

    private ObservableCollection<ImportStatusModel> StatusReports = new();
    private ObservableCollection<string> Warnings = new();

    private string? statusVerificationMessage;
    private int statusVerificationPercentage;
    private string? statusUploadMessage;
    private int statusUploadPercentage;

    private int maxFileSize = 1024 * 1024; // 1 MB in bytes
    CancellationTokenSource ctsUpload = new();

    private bool isValidatedField = true;
    private bool openWarningPanel = false;
    private bool allowedToUpload = true;
    private bool allowedToCloseModal = false;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        await Reset();

        foreach (var file in e.GetMultipleFiles(int.MaxValue))
        {
            if (Path.GetExtension(file.Name) == ".xlsx")
            {
                await file.OpenReadStream(long.MaxValue).CopyToAsync(excelFileStream);
            }
            else
            {
                Files.Add(file);
            }
        }

        await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#ImportProductModal");
    }

    private async Task OnProcessItemsAsync()
    {
        if (excelFileStream.Length > 0)
        {
            await JSRuntime.InvokeVoidAsync("ImportCarouselNext", "importProductSlide");
            isValidatedField = true;

            //Wait for the carousel
            await Task.Delay(1000);

            statusVerificationMessage = "Processing worksheet...";
            StateHasChanged();

            var extractedProducts = await ExcelConnector.RetrieveProductsAsync(excelFileStream, ReportProgress);

            products = await ConvertToProductModels(extractedProducts);

            await VerifyImagesAsync();
            openWarningPanel = true;

            if (allowedToUpload == true)
            {
                await OnProceedUpload(); 
            }
        }
        else
        {
            isValidatedField = false;
        }
    }

    private async Task OnProceedUpload()
    {
        openWarningPanel = false;
        allowedToUpload = true;
        StateHasChanged();

        try
        {
            await UploadProducts(ctsUpload.Token);
        }
        catch (Exception ex)
        {
            StatusReports.Add(new ImportStatusModel
                { Status = "Uploading brand was cancelled." + ex.Message});
        }
    }

    private void OnCancelToken()
    {
        ctsUpload.Cancel();
    }


    private async Task<List<ProductModel>> ConvertToProductModels(List<ExtractedProductModel> extractedModels)
    {
        var products = new List<ProductModel>();
        var prosessedItem = 1;
        var prosessedItemPercentage = 1;
        var lastTaskVerifiedPercent = statusVerificationPercentage;
        allowedToCloseModal = false;

        var reqDTO = new RequestPageDTO
            {
                PageNo = 1,
                ItemPerPage = 1000,
                OrderBy = 1
            };

        foreach (var item in extractedModels)
        {
            prosessedItemPercentage = lastTaskVerifiedPercent + ((prosessedItem * 33) / extractedModels.Count);
            prosessedItem++;

            var product = new ProductModel
                {
                    ProductName = item.ProductName,
                    Sku = item.Sku,
                    Color = item.Color,
                    Size = item.Size,
                    StoredImageName = item.Image,
                    Description = item.Description
                };

            reqDTO.LookFor = item.BrandName.ToLower();
            var getBrandFromCloud = await BrandEndpoint.GetBrandSummary(reqDTO);
            product.BrandId = await SetProductIdFromCloudResult<BrandSummaryDTO>(item.ProductName, getBrandFromCloud, reqDTO, prosessedItemPercentage);

            reqDTO.LookFor = item.Category.ToLower();
            var getCategoryFromCloud = await CategoryEndpoint.GetCategorySummaryAsync(reqDTO);
            product.CategoryId = await SetProductIdFromCloudResult<CategorySummaryDTO>(item.ProductName, getCategoryFromCloud, reqDTO, prosessedItemPercentage);

            reqDTO.LookFor = item.SubCategory.ToLower();
            var getSubCategoryFromCloud = await SubCategoryEndpoint.GetSubCategorySummary(reqDTO);
            product.SubCategoryId = await SetProductIdFromCloudResult<SubCategorySummaryDTO>(item.ProductName, getSubCategoryFromCloud, reqDTO, prosessedItemPercentage);

            if (product.BrandId != -1 && product.CategoryId != -1 && product.SubCategoryId != -1)
            {
                products.Add(product);
            }
        }

        extractedModels.Clear();
        statusVerificationMessage = "";
        allowedToCloseModal = true;

        return products;
    }

    private async Task<int> SetProductIdFromCloudResult<T>(string productName, ResultDTO<RequestModel<T>>? result, RequestPageDTO request, int progressPercentage)
    {
        if (result == null || result.Data == null)
        {
            var type = "";

            if (typeof(T) == typeof(BrandSummaryDTO))
                type = "Brand";
            else if (typeof(T) == typeof(CategorySummaryDTO))
                type = "Category";
            else if (typeof(T) == typeof(SubCategorySummaryDTO))
                type = "Sub Category";

            await ReportProgress($"Error: Cannot find {type}[{request.LookFor}]", progressPercentage);
            return -1;
        }

        // If more than one item found in the cloud
        if (result.Data.Models.Count > 1)
        {
            var itemType = typeof(T).Name.Replace("SummaryDTO", "");
            var msg = new StringBuilder($"Error: {result.Data.Models.Count} items found with the same '{request.LookFor}' for {productName}");
            msg.AppendLine().Append("[");

            foreach (var item in result.Data.Models)
            {
                var prop = typeof(T).GetProperty($"{itemType}Name");
                if (prop != null)
                {
                    var itemName = prop.GetValue(item)?.ToString();
                    if (!string.IsNullOrWhiteSpace(itemName))
                        msg.Append(itemName).Append(",");
                }
            }

            msg.Length--;
            msg.Append("]");
            Warnings.Add(msg.ToString() + Environment.NewLine);
            await ReportProgress(msg.ToString(), progressPercentage);
            return -1;
        }

        var getItem = result.Data.Models.FirstOrDefault(x =>
            (x is BrandSummaryDTO brand && brand.BrandName!.ToLower() == request.LookFor) ||
            (x is CategorySummaryDTO category && category.CategoryName!.ToLower() == request.LookFor) ||
            (x is SubCategorySummaryDTO subcategory && subcategory.SubCategoryName!.ToLower() == request.LookFor));

        if (getItem != null)
        {
            var idProp = typeof(T).GetProperty("Id");
            var nameProp = typeof(T).GetProperty($"{typeof(T).Name.Replace("SummaryDTO", "")}Name")?.GetValue(getItem);

            if (idProp != null)
            {
                var id = idProp.GetValue(getItem)?.ToString() ?? "-1";
                await ReportProgress($"Set {typeof(T).Name.Replace("SummaryDTO", "")} Id for {productName}", progressPercentage);

                return int.Parse(id);
            }
        }

        return -1;
    }

    private async Task VerifyImagesAsync()
    {
        var processedPercentage = 1;
        var lastTaskVerifiedPercent = statusVerificationPercentage;

        foreach (var product in products)
        {
            processedPercentage++;
            statusVerificationMessage = $"Verifying {product.ProductName} image";
            statusVerificationPercentage = lastTaskVerifiedPercent + ((processedPercentage * 34) / products.Count);

            var statusReport = new ImportStatusModel
                {
                    ModelName = product.ProductName,
                    Status = statusVerificationMessage,
                    Type = "Image"
                };

            var getImage = Files.SingleOrDefault(x => x.Name == product.StoredImageName);

            if (getImage != null)
            {
                if (getImage.Size > maxFileSize)
                {
                    var msg = $"Error: Image for {product.ProductName} exceed 1 MB | FileName: {product.StoredImageName}";
                    statusReport.Status = msg;
                    statusReport.Type = "Error";
                    allowedToUpload = false;
                    Warnings.Add(msg);
                    Files.Remove(getImage);
                }
                else
                {
                    using (var stream = new MemoryStream())
                    {
                        await getImage.OpenReadStream(maxFileSize).CopyToAsync(stream).ConfigureAwait(false);
                        statusReport.ImgString = $"data:{getImage.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";
                    }
                    statusReport.Status = "Success: Verified Image!";
                }
            }
            else
            {
                var msg = $"Error: Image not found for {product.ProductName} | FileName: {product.StoredImageName}";
                statusReport.Status = msg;
                statusReport.Type = "Error";
                allowedToUpload = false;
                Warnings.Add(msg);
            }

            StatusReports.Add(statusReport);
            await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importProductSatus").ConfigureAwait(false);
            StateHasChanged();
        }

        statusVerificationMessage = "";
    }

    private async Task UploadProducts(CancellationToken cancellationToken)
    {
        var processedPercentage = 0;

        await Task.Run(async () =>
        {
            await Task.WhenAll(products.Select(async item =>
            {
                cancellationToken.ThrowIfCancellationRequested();

                var getImage = Files.SingleOrDefault(x => x.Name == item.StoredImageName);

                var result = await ProductEndpoint.AddProductAsync(item, getImage?.OpenReadStream(maxFileSize), item.ProductName).ConfigureAwait(false);

                string statusUploadMessage;
                if (result!.IsSuccessStatusCode)
                {
                    statusUploadMessage = getImage != null ?
                        $"Success: Successfully uploaded {item.ProductName}" :
                        $"Warning: {item.ProductName} uploaded without an image";
                }
                else
                {
                    statusUploadMessage = result.ReasonPhrase!.Contains("Exist")? 
                    $"Warning: {result.ReasonPhrase}" :
                    $"Error: Unable to upload reason:{Environment.NewLine}{result.ReasonPhrase}";
                }

                StatusReports.Add(new ImportStatusModel { Status = statusUploadMessage });
                await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importProductSatus");

                Interlocked.Increment(ref processedPercentage);
                statusUploadPercentage = (processedPercentage * 100) / products.Count;

                StateHasChanged();
            }));
        });

        allowedToCloseModal = true;
    }

    private async Task ReportProgress(string task, int percent)
    {
        var statusReport = new ImportStatusModel
        {
            Status = task,
            Type = "Item"
        };

        statusVerificationMessage = task;
        statusVerificationPercentage = percent;

        StatusReports.Add(statusReport);
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importProductSatus");
    }

    private async Task Reset()
    {
        excelFileStream = new();
        Files = new();
        products = new();
        Warnings = new();
        statusVerificationPercentage = 0;
        statusUploadPercentage = 0;
        isValidatedField = true;
        openWarningPanel = false;
        allowedToCloseModal = false;
        openWarningPanel = false;
        await JSRuntime.InvokeVoidAsync("ImportCarouselReset", "importProductSlide");
    }
}
