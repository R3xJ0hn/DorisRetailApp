
@using System.Collections.ObjectModel;
@using System.Text;
@inject CategoryEndpoint CategoryEndpoint
@inject SubCategoryEndpoint SubCategoryEndpoint
@inject IJSRuntime JSRuntime
@inject IConfiguration Config
@inject ExcelConnector ExcelConnector

<div class="import-modal modal fade" id="importCategoryModal" data-bs-backdrop="static" data-bs-keyboard="false"
     tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5 text-primary" id="staticBackdropLabel">Import Excel File</h1>
                <button type="button" class="btn-close" @onclick="Reset" disabled="@(!isDone)"
                data-bs-dismiss="modal" aria-label="Close" ></button>
            </div>
            <div class="modal-body">

                <div class="carousel slide no-gutters" data-bs-interval="false" id="importCategorySlide">

                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <div class="modal-body row ">

                                <div class="col-md ">

                                    <h5>
                                        To import an <span class="text-success">Excel file</span>, please follow
                                        these steps:
                                    </h5>

                                    <ol>
                                        <li>
                                            Click the <b>'Choose File'</b> button below and select your Excel file.
                                        </li>

                                        <li>
                                            The first row should contain the header information for each category.
                                            For example, you can have column headers like "Category 1", "Category 2", etc.
                                            These headers will be used as the category names in the Category objects.
                                        </li>

                                        <li>
                                            Below the header row, in each column, you can add the subcategories for each category.
                                            Each cell should contain one subcategory entry. You can have multiple subcategories
                                            in each column, separated by rows.
                                        </li>

                                        <li>
                                            Click the <b>'Proceed'</b> button to proceed with the import
                                            process.
                                        </li>
                                    </ol>


                                </div>


                                <div class="col-sm">

                                    <div class="mb-3">
                                        <img src="/img/Category-Spreadsheet.png" alt="Spreadsheet">
                                    </div>

                                    <div class="mb-3">
                                        <label for="formFile" class="form-label">Upload File</label>

                                        <InputFile OnChange="LoadFiles" class="form-control " 
                                                   accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />
                                         <div class="form-validation @(isValidatedField ? "d-none" : "")">
                                                Please select an excel file.
                                         </div>
                                    </div>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal" @onclick="Reset">
                                    Close
                                </button>


                                <button type="button" class="btn btn-primary proceed-btn"
                                        @onclick="ProcessItemsAsync">
                                    Proceed

                                </button>
                            </div>
                        </div>

                        <div class="carousel-item import-status">
                            <div class="modal-body">

                                <div class="verify-item">
                                    <p>Verifying: @taskVerified</p>
                                    <div class="progress">

                                        <div class="progress-bar
                                             @(taskVerifiedPercent != 100? "progress-bar-striped progress-bar-animated" : "")"
                                             role="progressbar"
                                             style="width: @taskVerifiedPercent%;"
                                             aria-valuenow="@taskVerifiedPercent"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                            @taskVerifiedPercent%
                                        </div>

                                    </div>
                                </div>

                                <div class="upload-item">
                                    <p>Uploading: @taskUploaded</p>
                                    <div class="progress">

                                        <div class="progress-bar
                                             @(taskUploadedPercent != 100? "progress-bar-striped progress-bar-animated" : "")"
                                             role="progressbar"
                                             style="width: @taskUploadedPercent%;"
                                             aria-valuenow="@taskUploadedPercent"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                            @taskUploadedPercent%
                                        </div>

                                    </div>

                                </div>

                                <div class="status-list">
                                    Status:
                                    <ul id="importCategorySatus">

                                        @foreach (var stat in Status)
                                        {
                                            <li class="@(stat.Contains("Error:")? "text-danger" : "" )
                                                       @(stat.Contains("Warning:")? "text-warning" : "" )
                                                       @(stat.Contains("Success:")? "text-success" : "" ) ">
                                                @stat
                                            </li>
                                        }

                                    </ul>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-bs-target="#importSlide"
                                        data-bs-slide-to="0" data-bs-dismiss="modal" disabled="@(!isDone)" 
                                        @onclick="Reset">
                                    Done
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
</div>


@code {
    private MemoryStream fileStream = new();
    private ObservableCollection<string> Status = new();
    private List<CategoryModel> categories = new();
    private List<SubCategoryModel> subCategories = new();

    private string taskVerified = string.Empty;
    private int taskVerifiedPercent = 0;
    private string taskUploaded = string.Empty;
    private int taskUploadedPercent = 0;

    int currentUploadedCount = 2;
    int totalNeedToUpload = 0;
    bool isDone = false;
    bool isValidatedField = true;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        await Reset();
        taskVerified = "Loading File...";
        StateHasChanged();
        foreach (var file in e.GetMultipleFiles(1))
        {
            await file.OpenReadStream().CopyToAsync(fileStream);
        }
    }

    private async Task ProcessItemsAsync()
    {
        if (fileStream.Length>0)
        {
            await JSRuntime.InvokeVoidAsync("ImportCarouselNext", "importCategorySlide");
            isValidatedField = true;
            //Wait the carousel
            await Task.Delay(1000);

            if (fileStream != null)
            {
                taskVerified = "Preparing...";
                StateHasChanged();
                categories = await ExcelConnector.RetrieveCategoriesAsync(fileStream, WorkSheetStatus);
                subCategories = await ExcelConnector.RetrieveSubCategoriesAsync(fileStream, WorkSheetStatus);
                totalNeedToUpload = categories.Count + subCategories.Count + 1;
                taskVerified = "";
            }

            await UploadCategories();
            await UploadSubCategories();
            isDone = true;
        }
        else
        {
            isValidatedField = false;
        }
    }

    private async Task UploadCategories()
    {
        if (categories != null)
        {
            foreach (var item in categories)
            {
                var result = await CategoryEndpoint.AddCategoryAsync(item);
                taskUploaded = item.CategoryName;
                taskUploadedPercent = (currentUploadedCount * 100) / totalNeedToUpload;
                currentUploadedCount++;


                if (!result!.IsSuccessStatusCode)
                {
                    if (result.ReasonPhrase!.Contains("Exist"))
                    {
                        await UploadStatus("Warning: " + result?.ReasonPhrase, taskUploadedPercent);
                    }
                    else
                    {
                        await UploadStatus("Error: " + result?.ReasonPhrase, taskUploadedPercent);
                    }

                }
                else
                {
                    await UploadStatus("Success: " + result?.ReasonPhrase, taskUploadedPercent);
                }
            }

            taskUploaded = "";
        }
    }

    private async Task UploadSubCategories()
    {
        // Pre request to get total items
        var reqDTO = new RequestPageDTO
        {
            PageNo = 1,
            ItemPerPage = 1000,
            OrderBy = 1
        };

        int lastId = -1;
        int dBId = -1;

        if (subCategories != null)
        {
            foreach (var item in subCategories)
            {
                var getFromExcel = categories[item.CategoryId];
                taskUploaded = item.SubCategoryName;
                taskUploadedPercent = (currentUploadedCount * 100) / totalNeedToUpload;
                currentUploadedCount++;

                //Get the database id for category
                if (lastId != getFromExcel.Id)
                {
                    lastId = getFromExcel.Id;
                    reqDTO.LookFor = getFromExcel.CategoryName.ToLower();
                    var getFromCloud = await CategoryEndpoint.GetCategorySummaryAsync(reqDTO);

                    if (getFromCloud != null)
                    {
                        reqDTO.ItemPerPage = getFromCloud.Data.TotalItems;

                        // If more than one item found in the cloud
                        if (getFromCloud.Data.Models.Count > 1)
                        {
                            var msg = new StringBuilder($"Error: {getFromCloud.Data.Models.Count} items found with the same category[{reqDTO.LookFor}]");
                            msg.AppendLine();
                            msg.Append("[");
                            foreach (var category in getFromCloud.Data.Models)
                            {
                                msg.Append(category.CategoryName).Append(",");
                            }
                            msg.Length--;
                            msg.Append("]");
                            await UploadStatus(msg.ToString(), taskUploadedPercent);
                        }

                        //What we need
                        dBId = getFromCloud.Data.Models.FirstOrDefault(x => x.CategoryName.ToLower() == reqDTO.LookFor)?.Id ?? -1;
                    }
                    else
                    {
                        await UploadStatus($"Error: Cannot find category[{reqDTO.LookFor}] for {item.SubCategoryName}", taskUploadedPercent);
                    }
                }

                //Upload Sub Category
                item.CategoryId = dBId;
                var result = await SubCategoryEndpoint.AddSubCategoryAsync(item);

                if (!result!.IsSuccessStatusCode)
                {
                    if (result.ReasonPhrase!.Contains("Exist"))
                    {
                        await UploadStatus("Warning: " + result?.ReasonPhrase, taskUploadedPercent);
                    }
                    else
                    {
                        await UploadStatus("Error: " + result?.ReasonPhrase, taskUploadedPercent);
                    }

                }
                else
                {
                    await UploadStatus($"Success: Successfully Uploaded {item.SubCategoryName}", taskUploadedPercent);
                }

            }
            taskUploaded = "";
        }

    }


    private async Task UploadStatus(string status, int percent)
    {
        taskUploaded = status;
        Status.Add(status);
        StateHasChanged();
        taskUploadedPercent = percent;
        await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importCategorySatus");
    }

    private async Task WorkSheetStatus(string status, int percent)
    {
        taskVerified = status;
        Status.Add(status);
        StateHasChanged();
        taskVerifiedPercent = percent;
        await JSRuntime.InvokeVoidAsync("scrollToListBottom", "#importCategorySatus");
    }

    private async Task Reset()
    {
        Status.Clear();
        taskVerified = string.Empty;
        taskVerifiedPercent = 0;
        taskUploaded = string.Empty;
        taskUploadedPercent = 0;
        fileStream = new();
        currentUploadedCount = 2;
        totalNeedToUpload = 0;
        await JSRuntime.InvokeVoidAsync("ImportCarouselReset", "importCategorySlide");
    }


}
