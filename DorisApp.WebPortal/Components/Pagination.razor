@using System.Linq
@using System.Collections.Generic

@if (PageCount > 1)
{
    <nav aria-label="Page navigation example">
        <ul class="pagination  pagination-sm  justify-content-end">

            <p>Showing @CurrentPage out of @PageCount</p>

            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" disabled="@(CurrentPage == 1)" @onclick="() => OnPageChange(CurrentPage - 1)">Previous</button>
            </li>
            @foreach (var page in GetPages())
            {
                <li class="page-item @(CurrentPage == page ? "active" : "")">
                    <button class="page-link" disabled="@(CurrentPage == page)" @onclick="() => OnPageChange(page)">@(page)</button>
                </li>
            }
            <li class="page-item @(CurrentPage == PageCount ? "disabled" : "")">
                <button class="page-link" disabled="@(CurrentPage == PageCount)" @onclick="() => OnPageChange(CurrentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int MaxPages { get; set; } = 5;

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    private IEnumerable<int> GetPages()
    {
        var start = Math.Max(1, CurrentPage - MaxPages / 2);
        var end = Math.Min(PageCount, start + MaxPages - 1);
        return Enumerable.Range(start, end - start + 1);
    }

    private async Task OnPageChange(int page)
    {
        CurrentPage = page;
        await OnPageChanged.InvokeAsync(CurrentPage);
    }
}