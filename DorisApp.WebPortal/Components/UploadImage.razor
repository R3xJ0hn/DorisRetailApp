@inject IJSRuntime JSRuntime

<div class="upload-image-container mb-3">
    <div class="upload-image-wrapper">

        <img class="upload-image" alt="">

        <button class="openFileBtn" @onclick="OpenFileBtn">
            <i class="fa-regular fa-circle-plus"></i>
        </button>
        <div class="text">
            Add image
        </div>
        <div id="cancel-btn" @onclick="RemoveActiveImage">
            <i class="fas fa-times"></i>
        </div>
        <div class="file-name">
           
        </div>

    </div>

    <InputFile id="open-img" OnChange="HandleFileSelected" accept=".png,.jpg,.jpeg" hidden />

    @if (fileSize > MaxFileSize)
    {
        <p class="text-danger">File size cannot exceed 1 MB.</p>
    }
</div>

@code {

    long fileSize = 0;
    private bool rendered;

    [Parameter]
    public long MaxFileSize { get; set; }   

    [Parameter]
    public EventCallback<InputFileChangeEventArgs> OnFileChange { get; set; }

    protected override void OnAfterRender(bool firstRender) => rendered = true;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        fileSize = file.Size;
        await OnFileChange.InvokeAsync(e);
    }

    public async Task SetActiveImage(string url)
    {
        if (!string.IsNullOrWhiteSpace(url) && rendered)
        {
            await JSRuntime.InvokeVoidAsync("setUploadImageToActive", url);
        }
    }

    public async Task RemoveActiveImage()
    {
        await JSRuntime.InvokeVoidAsync("setUploadImageToDeactive");
        await JSRuntime.InvokeVoidAsync("clearUploadValue");
    }

    private async Task OpenFileBtn()
    {
        await JSRuntime.InvokeVoidAsync("uploadImage");
    }
}
