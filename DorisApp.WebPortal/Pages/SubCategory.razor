@page "/category/subcategories"
@inject IJSRuntime JSRuntime
@inject IConfiguration Config
@inject CategoryEndpoint CategoryEndpoint
@inject SubCategoryEndpoint SubCategoryEndpoint

<div class="subcategory-page-content">

    <div class="row">

        <div class="col-lg-9">

            <div class="row align-items-end">
                <div class="col ">
                    <h3 class="table-title">List of Sub Categories</h3>
                </div>

                <div class="col ">
                    <button type="button" class="add-btn btn btn-gradient-primary " data-bs-toggle="modal"
                            data-bs-target="#subCategoryModal" @onclick="OpenAddSubCategoryModal">
                        <i class="fa-regular fa-circle-plus"></i>
                        Add
                    </button>
                </div>
            </div>

            <div class="table-card">

                <div class="table-card-header">
                    <div class="search-bar">
                        <input type="search" class="form-control" placeholder="Search..." @oninput="OnSearchItem">
                    </div>

                    @if (categorySummary != null)
                    {
                        <div class="count-item">
                            @{
                                int startItemIndex = (categorySummary.IsInPage - 1) * categorySummary.ItemPerPage + 1;
                                int endItemIndex = Math.Min(categorySummary.IsInPage * categorySummary.ItemPerPage, categorySummary.TotalItems);
                                string displayText = $"Showing {startItemIndex}-{endItemIndex} out of {categorySummary.TotalItems}";
                            }
                            @displayText
                        </div>
                    }
                </div>



                <div class="table-wrapper">
                    <table class="table">

                        <thead>
                            <tr>
                                <th scope="col"></th>

                                <th scope="col" @onclick="(() => OnSortChange('s')) " class="sortable
                                        @((selectedSortValue == OrderSubCategorySummaryBy.NameAcs) ? "" : "asc")
                                        @((selectedSortValue == OrderSubCategorySummaryBy.NameAcs ||
                                         selectedSortValue == OrderSubCategorySummaryBy.NameDesc ) ? "active" : "")  ">
                                    Sub Category Name
                                </th>

                                <th scope="col" @onclick="(() => OnSortChange('c')) " class="sortable
                                        @((selectedSortValue == OrderSubCategorySummaryBy.CategoryNameAcs) ? "" : "asc")
                                        @((selectedSortValue == OrderSubCategorySummaryBy.CategoryNameAcs ||
                                         selectedSortValue == OrderSubCategorySummaryBy.CategoryNameDesc ) ? "active" : "")  ">
                                    Category
                                </th>

                                <th scope="col" @onclick="(() => OnSortChange('p')) " class="sortable
                                        @((selectedSortValue == OrderSubCategorySummaryBy.ProductCountAcs) ? "" : "asc")
                                        @((selectedSortValue == OrderSubCategorySummaryBy.ProductCountAcs ||
                                         selectedSortValue == OrderSubCategorySummaryBy.ProductCountDesc ) ? "active" : "")  ">
                                   No. of Product
                                </th>

                                <th scope="col">Action</th>
                            </tr>
                        </thead>

                        @if (subCategorySummary != null)
                        {
                            @foreach (var item in subCategorySummary.Models)
                            {
                                <tbody>
                                    <tr>
                                        <td scope="row">
                                            <span></span>
                                        </td>
                                        <td>@item.SubCategoryName</td>

                                        <td class="@((@item.CategoryName.Contains("*")) ? "text-danger" : "")">
                                            @item.CategoryName.Replace("*", "")
                                        </td>

                                        <td>@item.ProductCount</td>
                                        <td>
                                            <div class="table-icons">

                                                <i class="fa-solid fa-pencil" data-bs-toggle="modal"
                                           data-bs-target="#subCategoryModal"
                                           @onclick="@(() => OpenEditSubCategoryModal(item.Id))"></i>

                                                <i class="fa-solid fa-xmark" data-bs-toggle="modal"
                                           data-bs-target="#subCategoryModal"
                                           @onclick="@(() => OpenDeleteSubCategoryModal(item.Id))"></i>

                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        }

                    </table>

                    @if (subCategorySummary == null)
                    {
                        <div class="no-item">

                            @if (isLoading)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <h6>No Sub Category has been loaded.</h6>
                            }
                        </div>
                    }

                </div>

                <Pagination CurrentPage="@currentPage"
                            PageCount="@totalPages"
                            OnPageChanged="OnHandlePageChange" />

            </div>
        </div>

        <div class="col-lg-3 d-flex justify-content-center align-content-center">

            NOTHING IN HERE?

        </div>

        <Modal @ref="modalComponentRef"
               modalId="subCategoryModal"
               Title="@modalTitle"
               SaveButtonText="Save"
               modalMode="@modalMode"
               OnSave="OnSaveModal"
               OnClose="OnCloseModal">

            @if (modalMode != "delete")
            {
                <p class="card-description text-justify">
                    You can change the subcategories on your website by filling out a form
                    with the category name and selecting a category from a dropdown list.
                    If the category you want isn't on the list, you can add a new one by
                    going to the category page.
                </p>

                <EditForm Model="@modalModel" OnInvalidSubmit="@OnSaveModal">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <InputSelect class="form-select" id="category" @bind-Value="modalModel.CategoryId">
                            <option value="0" selected>--Select Category--</option>

                            @if (categorySummary != null)
                            {
                                @foreach (var category in categorySummary.Models)
                                {
                                    <option value="@category.Id">@(category.CategoryName)</option>
                                }
                            }

                        </InputSelect>
                    </div>

                    <div class="mb-3 p-2">
                        <label for="subCategoryName" class="form-label">Sub Category Name</label>
                        <InputText id="subCategoryName" class="form-control" placeholder="Sub Category Name" @bind-Value="modalModel.SubCategoryName" />
                        <ValidationMessage For="@(()=> modalModel.SubCategoryName)" class="form-validation" />

                    </div>

                </EditForm>
            }
            else
            {
                <div>
                    Are you sure you want to delete
                    <b class="text-primary">@(modalModel.SubCategoryName)</b>?
                </div>
            }

        </Modal>


    </div>

</div>

<HttpErrorPopUp @ref="HttpErrorHandler" />

@code {
    private HttpErrorPopUp? HttpErrorHandler = new();
    private RequestModel<SubCategorySummaryDTO>? subCategorySummary;
    private RequestModel<CategorySummaryDTO>? categorySummary;
    private RequestPageDTO categoryRequestDTO = new();
    private RequestPageDTO subCategoryRequestDTO = new();
    private SubCategoryModel modalModel = new();

    private int totalPages = 1;
    private int currentPage = 1;
    private bool isLoading = true;

    private Modal? modalComponentRef;
    private string modalTitle = string.Empty;
    private string modalMode = string.Empty;

    private OrderSubCategorySummaryBy selectedSortValue;


    protected override async Task OnInitializedAsync()
    {
        subCategoryRequestDTO.PageNo = 1;
        subCategoryRequestDTO.ItemPerPage = int.Parse(Config["AppSettings:itemPerPage"] ?? "10");
        await RequestItems(currentPage, selectedSortValue);

        //Request to get all items in Category
        categoryRequestDTO.PageNo = 1;
        categoryRequestDTO.ItemPerPage = await CategoryEndpoint.CountCategoryItems();
        categorySummary = (await CategoryEndpoint.GetCategorySummary(categoryRequestDTO))?.Data;

    }

    private async Task RequestItems(int page, OrderSubCategorySummaryBy orderBy)
    {
        subCategoryRequestDTO.PageNo = page;
        subCategoryRequestDTO.OrderBy = (int)orderBy;
        isLoading = true;

        subCategorySummary = (await SubCategoryEndpoint
        .GetSubCategorySummary(subCategoryRequestDTO))?.Data;

        if (subCategorySummary != null)
        {
            totalPages = subCategorySummary.TotalPages;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSearchItem(ChangeEventArgs e)
    {
        currentPage = 1;
        string? searchFor = e?.Value?.ToString();
        subCategoryRequestDTO.LookFor = VerifySearchBar(searchFor);
        await RequestItems(currentPage, selectedSortValue);
    }


    private async Task OnSortChange(char sortBy)
    {

        switch (sortBy)
        {
            case 's':
                selectedSortValue = selectedSortValue == OrderSubCategorySummaryBy.NameAcs ?
                OrderSubCategorySummaryBy.NameDesc : OrderSubCategorySummaryBy.NameAcs;
                break;

            case 'c':
                selectedSortValue = selectedSortValue == OrderSubCategorySummaryBy.CategoryNameAcs ?
                OrderSubCategorySummaryBy.CategoryNameDesc : OrderSubCategorySummaryBy.CategoryNameAcs;
                break;

            case 'p':
                selectedSortValue = selectedSortValue == OrderSubCategorySummaryBy.ProductCountAcs ?
                OrderSubCategorySummaryBy.ProductCountDesc : OrderSubCategorySummaryBy.ProductCountAcs;
                break;

            default:
                selectedSortValue = selectedSortValue == OrderSubCategorySummaryBy.NameAcs ?
                OrderSubCategorySummaryBy.NameDesc : OrderSubCategorySummaryBy.NameAcs;
                break;
        }

        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnHandlePageChange(int page)
    {
        currentPage = page;
        await RequestItems(page, selectedSortValue);
    }

    private async Task OnSaveModal()
    {
        if (modalMode == "add")
        {
            await AddSubCategory();
        }
        else if (modalMode == "edit")
        {
            await EditSubCategory();
        }
        else if (modalMode == "delete")
        {
            await DeleteSubCategory();
        }
    }

    private async Task OnCloseModal()
    {
        modalModel.SubCategoryName = string.Empty;
        modalModel.CategoryId = 0;
        await RequestItems(currentPage, selectedSortValue);
    }

    private void OpenAddSubCategoryModal()
    {
        modalTitle = "Add New Sub Category";
        modalMode = "add";
        modalModel.SubCategoryName = string.Empty;
        modalModel.Id = 0;
    }

    private void OpenEditSubCategoryModal(int id)
    {
        modalTitle = "Edit Sub Category";
        modalMode = "edit";
        SetModalModel(id);
    }

    private void OpenDeleteSubCategoryModal(int id)
    {
        modalTitle = "Delete Sub Category";
        modalMode = "delete";
        SetModalModel(id);
    }

    private async Task AddSubCategory()
    {
        try
        {

            var subCategory = new SubCategoryModel
            {
                SubCategoryName = modalModel.SubCategoryName,
                CategoryId = modalModel.CategoryId
            };

            var result = await SubCategoryEndpoint.AddSubCategoryAsync(subCategory);

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<List<SubCategorySummaryDTO>>(result);
        }
        catch (Exception ex)
        {
            await CatchError(ex.Message);

        }

        modalComponentRef?.Close();
    }

    private async Task EditSubCategory()
    {
        try
        {

            var subCategory = new SubCategoryModel
            {
                Id = modalModel.Id,
                SubCategoryName = modalModel.SubCategoryName,
                CategoryId = modalModel.CategoryId,
            };

            var result = await SubCategoryEndpoint.UpdateCategory(subCategory);

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<List<SubCategorySummaryDTO>>(result);

        }
        catch (Exception ex)
        {
            await CatchError(ex.Message);
        }

        modalComponentRef?.Close();
    }

    private async Task DeleteSubCategory()
    {
        try
        {

            var subCategory = new SubCategoryModel
            {
                Id = modalModel.Id,
                SubCategoryName = modalModel.SubCategoryName,
                CategoryId = modalModel.CategoryId
            };

            var result = await SubCategoryEndpoint.DeleteCategory(subCategory);

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<SubCategorySummaryDTO>(result);
        }
        catch (Exception ex)
        {
            await CatchError(ex.Message);

        }

        modalComponentRef?.Close();
    }

    private void SetModalModel(int subCategoryId)
    {
        var subCategoryToEdit = subCategorySummary?.Models
        .FirstOrDefault(x => x.Id == subCategoryId);

        if (subCategoryToEdit != null)
        {
            modalModel.Id = subCategoryId;
            modalModel.CategoryId = subCategoryToEdit.CategoryId;
            modalModel.SubCategoryName = subCategoryToEdit.SubCategoryName ?? "";
        }
    }

    private string? VerifySearchBar(string? str) =>
    string.IsNullOrWhiteSpace(str) ? null : str;

    private string CleanData(string data)
    {
        if (data.Contains("*"))
        {
            data = data.Replace("*", "");
        }
        return data;
    }

    private async Task CatchError(string exMessage)
    {
        var result = new ResultDTO<BrandSummaryDTO>
            {
                ErrorCode = 1
            };

        if (HttpErrorHandler != null)
            await HttpErrorHandler.HandleHttpErrors<BrandSummaryDTO>(result, exMessage);
    }

}