@page "/category/subcategories"
@inject IJSRuntime JSRuntime
@inject IConfiguration Config
@inject CategoryEndpoint CategoryEndpoint
@inject SubCategoryEndpoint SubCategoryEndpoint


<div class="subcategory-page-content">

    <div class="row">

        <div class="col-lg-9">

            <div class="row align-items-end">
                <div class="col ">
                    <h3 class="table-title">List of Sub Categories</h3>
                </div>

                <div class="col ">
                    <button type="button" class="add-btn btn btn-gradient-primary " data-bs-toggle="modal"
                            data-bs-target="#subcategoryModal" @onclick="OpenAddModal">
                        <i class="fa-regular fa-circle-plus"></i>
                        Add
                    </button>
                </div>
            </div>

            <div class="table-card">

                <div class="row ">
                    <div class="col-md  d-flex">
                        <div class="search-bar">
                            <input type="search" class="form-control" placeholder="Search..." @oninput="OnSearchItem">
                        </div>

                        <div class="sort-select">
                            <label for="sort-table">Sort by:</label>

                            <select class="form-select form-select-sm"
                                    @onchange="OnSelectSortChange">
                                <option value="@OrderSubCategorySummaryBy.NameAcs">Name A-Z</option>
                                <option value="@OrderSubCategorySummaryBy.NameDesc">Name Z-A</option>

                                <option value="@OrderSubCategorySummaryBy.ProductCountAcs">
                                    Product &#x2191;&#xFE0E;
                                </option>

                                <option value="@OrderSubCategorySummaryBy.ProductCountDesc">
                                    Product &#x2193;&#xFE0E;
                                </option>

                                <option value="@OrderSubCategorySummaryBy.CategoryCountAcs">
                                    Category A-Z
                                </option>

                                <option value="@OrderSubCategorySummaryBy.CategoryCountDesc">
                                    Category Z-A
                                </option>

                            </select>


                        </div>
                    </div>

                </div>

                <div class="table-wrapper">
                    <table class="table">

                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Sub Category Name</th>
                                <th scope="col">Category</th>
                                <th scope="col">No. of Product</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>

                        @if (subCategorySummary != null)
                        {
                            @foreach (var item in subCategorySummary.Models)
                            {
                                <tbody>
                                    <tr>
                                        <td scope="row">
                                            <span></span>
                                        </td>
                                        <td>@item.SubCategoryName</td>
                                        <td class="@((@item.CategoryName.Contains("*")) ? "text-danger" : "")">
                                            @item.CategoryName.Replace("*", "")</td>
                                        <td>@item.ProductCount</td>
                                        <td>
                                            <div class="table-icons">

                                                <i class="fa-solid fa-pencil" data-bs-toggle="modal"
                                                   data-bs-target="#subcategoryModal"
                                                   @onclick="@(() => OpenEditModal(item.Id))"></i>

                                                <i class="fa-solid fa-xmark" data-bs-toggle="modal"
                                                   data-bs-target="#subcategoryModal"
                                                   @onclick="@(() => OpenDeleteModal(item.Id))"></i>

                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        }

                    </table>

                    @if (subCategorySummary == null)
                    {
                        <div class="no-item">

                            @if (isLoading)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <h6>No Sub Category has been loaded.</h6>
                            }
                        </div>
                    }

                </div>

                <Pagination CurrentPage="@currentPage"
                            PageCount="@totalPages"
                            OnPageChanged="HandlePageChange" />

            </div>
        </div>

        <div class="col-lg-3 d-flex justify-content-center align-content-center">

            NOTHING IN HERE?

        </div>

        <Modal modalId="subcategoryModal"
               Title="@modalTitle"
               SaveButtonText="Save"
               modalMode="@modalMode"
               OnSave="SaveModalHandler">

            @if (modalMode != "delete")
            {

                @if (string.IsNullOrEmpty(errorMessage))
                {
                    <p class="card-description text-justify">
                        You can change the subcategories on your website by filling out a form
                        with the category name and selecting a category from a dropdown list.
                        If the category you want isn't on the list, you can add a new one by
                        going to the category page.
                    </p>
                }
                else
                {
                    <p class="card-description text-justify text-danger">
                        @errorMessage
                    </p>
                }


                <EditForm Model="@modalModel" OnInvalidSubmit="@SaveModalHandler">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <InputSelect class="form-select" id="category" @bind-Value="modalModel.CategoryId">
                            <option value="0" selected>--Select Category--</option>

                            @if (categorySummary != null)
                            {
                                @foreach (var category in categorySummary.Models)
                                {
                                    <option value="@category.Id">@(category.CategoryName)</option>
                                }
                            }

                        </InputSelect>
                    </div>

                    <div class="mb-3 p-2">
                        <label for="subCategoryName" class="form-label">Sub Category Name</label>
                        <InputText id="subCategoryName" class="form-control" placeholder="Sub Category Name" @bind-Value="modalModel.SubCategoryName" />
                        <ValidationMessage For="@(()=> modalModel.SubCategoryName)" />
                    </div>

                </EditForm>
            }
            else
            {
                <div>
                    Are you sure you want to delete
                    <b class="text-primary">@(modalModel.SubCategoryName)</b>?
                </div>
            }

        </Modal>

        <div class="toast-container position-fixed top-0 end-0 p-3">
            <Toast ToastId="categoryToast" Message="@toastMessage" ToastMode="@toastMode" />
        </div>

    </div>

</div>

@code
{
    private RequestModel<SubCategorySummaryDTO>? subCategorySummary;
    private RequestModel<CategorySummaryDTO>? categorySummary;
    private RequestPageDTO categoryRequestDTO = new();
    private RequestPageDTO subCategoryRequestDTO = new();

    private int totalPages = 1;
    private int currentPage = 1;
    private bool isLoading = true;

    private SubCategoryModel modalModel = new();
    private string modalTitle = string.Empty;
    private string modalMode = string.Empty;
    private int totalCategories = 0;

    private string toastMessage = string.Empty;
    private string toastMode = string.Empty;
    private string errorMessage = string.Empty;

    private OrderSubCategorySummaryBy selectedSortValue;


    protected override async Task OnInitializedAsync()
    {
        subCategoryRequestDTO.ItemPerPage = int.Parse(Config["AppSettings:itemPerPage"]);
        await RequestItems(currentPage, selectedSortValue);

        //Pre Request to get the total category items in api;
        categoryRequestDTO.PageNo = 1;
        categoryRequestDTO.ItemPerPage = 1;

        categorySummary = await CategoryEndpoint
        .GetCategorySummary(categoryRequestDTO);

        if (categorySummary != null)
        {
            //Get all the category items
            totalCategories = categorySummary.TotalItems;
            categoryRequestDTO.ItemPerPage = totalCategories;
            categorySummary = await CategoryEndpoint.GetCategorySummary(categoryRequestDTO);
        }

    }

    private async Task RequestItems(int page, OrderSubCategorySummaryBy orderBy)
    {
        subCategoryRequestDTO.PageNo = page;
        subCategoryRequestDTO.OrderBy = (int)orderBy;
        isLoading = true;

        subCategorySummary = await SubCategoryEndpoint
        .GetSubCategorySummary(subCategoryRequestDTO);

        if (subCategorySummary != null)
        {
            totalPages = subCategorySummary.TotalPages;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSelectSortChange(ChangeEventArgs e)
    {
        selectedSortValue = (OrderSubCategorySummaryBy)Enum
        .Parse(typeof(OrderSubCategorySummaryBy), e.Value.ToString());

        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnSearchItem(ChangeEventArgs e)
    {
        currentPage = 1;
        string? searchFor = e.Value.ToString();
        subCategoryRequestDTO.LookFor = VerifySearchBar(searchFor);
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task HandlePageChange(int page)
    {
        currentPage = page;
        await RequestItems(page, selectedSortValue);
    }

    private async Task AddSubCategory()
    {
        try
        {
            if (string.IsNullOrEmpty(modalModel.SubCategoryName))
            {
                errorMessage = "Sub Category name is required.";
                return;
            }

            if (modalModel.CategoryId == 0)
            {
                errorMessage += Environment.NewLine + "Select a category.";
                return;
            }

            await SubCategoryEndpoint.AddSubCategoryAsync(modalModel);
            await CloseModal("Successfully added new category.", "success");
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("enableButtons");
            errorMessage = $"Failed to add category: {ex.Message}";
        }
    }

    private async Task EditSubCategory()
    {
        try
        {
            if (string.IsNullOrEmpty(modalModel.SubCategoryName))
            {
                errorMessage = "Sub Category name is required.";
                return;
            }


            if (modalModel.CategoryId == 0)
            {
                errorMessage += Environment.NewLine + "Select a category.";
                return;
            }

            var subCategoryToUpdate = new SubCategoryModel
            {
                Id = modalModel.Id,
                SubCategoryName = modalModel.SubCategoryName,
                CategoryId = modalModel.CategoryId
            };

            await SubCategoryEndpoint.UpdateCategory(subCategoryToUpdate);
            await CloseModal("Successfully updated sub category.", "success");
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("enableButtons");
            errorMessage = $"Failed to update sub category: {ex.Message}";
        }
    }

    private async Task DeleteSubCategory()
    {
        try
        {
            var subCategory = new SubCategoryModel
            {
                Id = modalModel.Id,
                SubCategoryName = modalModel.SubCategoryName,
                CategoryId = modalModel.CategoryId
            };

            await SubCategoryEndpoint.DeleteCategory(subCategory);
            await CloseModal($"{subCategory.SubCategoryName} remove from subcategory.", "danger");

            await CloseModal("Successfully remove sub category.", "success");
        }
        catch (HttpRequestException ex)
        {
            await CloseModal($"Error request: {ex.Message}", "danger");
            errorMessage = $"Failed to remove sub category: {ex.Message}";
        }
    }

    private async Task SaveModalHandler()
    {
        if (modalMode == "add")
        {
            await AddSubCategory();
        }
        else if (modalMode == "edit")
        {
            await EditSubCategory();
        }
        else if (modalMode == "delete")
        {
            await DeleteSubCategory();
        }
    }

    private void OpenAddModal()
    {
        modalTitle = "Add New Sub Category";
        modalMode = "add";
        modalModel.SubCategoryName = string.Empty;
        modalModel.Id = 0;
    }

    private void OpenEditModal(int id)
    {
        modalTitle = "Edit Sub Category";
        modalMode = "edit";
        SetModalModel(id);
    }

    private void OpenDeleteModal(int id)
    {
        modalTitle = "Delete Sub Category";
        modalMode = "delete";
        SetModalModel(id);
    }

    private async Task CloseModal(string toastmsg, string mode)
    {
        toastMessage = toastmsg;
        toastMode = mode;
        await JSRuntime.InvokeVoidAsync("modalProcessDone", "#subcategoryModal");
        await JSRuntime.InvokeVoidAsync("showToast", "#categoryToast");

        //Request for Update
        await RequestItems(currentPage, selectedSortValue);
    }

    private void SetModalModel(int subCategoryId)
    {
        var subCategoryToEdit = subCategorySummary.Models.FirstOrDefault(x => x.Id == subCategoryId);
        if (subCategoryToEdit != null)
        {
            modalModel.SubCategoryName = subCategoryToEdit.SubCategoryName;
            modalModel.CategoryId = subCategoryToEdit.CategoryId;
            modalModel.Id = subCategoryId;
        }
    }

    private string? VerifySearchBar(string? str) => string.IsNullOrWhiteSpace(str) ? null : str;

    private string CleanData(string data)
    {
        if (data.Contains("*"))
        {
            data = data.Replace("*", "");
        }
        return data;
    }

}