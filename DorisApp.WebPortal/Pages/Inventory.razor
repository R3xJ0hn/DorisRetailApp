@page "/inventory"
@using System.Globalization;
@inject InventoryEndpoint InventoryEndpoint
@inject IJSRuntime JSRuntime
@inject IConfiguration Config

<div class="inventory-page-content">

    <div class="container-fluid">

        <!-- Start Panel 1 -->
        <div class="app-panel" id="panel1" style="opacity:1; display: flex;">
            <div class="container-fluid">

                <div class="row align-items-end">
                    <div class="col ">
                        <h3 class="table-title">Stock On Hand</h3>
                    </div>

                    <div class="col">
                        <button type="button" class="add-btn btn btn-gradient-primary " data-bs-toggle="modal"
                                data-bs-target="#inventoryModal">
                            <i class="fa-regular fa-circle-plus"></i>
                            Add
                        </button>
                    </div>

                </div>

                <div class="table-card">

                    <div class="row table-card-header">

                        <div class="col-md d-flex">
                            <div class="col-md search-bar">
                                <input type="search" class="form-control" value="@sku"
                                placeholder="Search..." @oninput="OnSearchItem">
                            </div>

                            <i class="fa-regular fa-filter-list" data-bs-toggle="collapse"
                               data-bs-target="#filter-collapse" aria-expanded="false"
                               aria-controls="filter-collapse">
                            </i>
                        </div>

                        <div class="col-md collapse d-md-block filter" id="filter-collapse">
                            <div class="date-filter  @(isDateFilterActive ? "active" : "")">
                                <div class="date-picker date-picker-sm">
                                    <input type="text" class="form-control" @bind="startDateText"
                                           placeholder="Start Date" autocomplete="off" id="start-date">
                                </div>
                                <p>To</p>
                                <div class="date-picker date-picker-sm">
                                    <input type="text" class="form-control" @bind="endDateText"
                                           placeholder="Date End" autocomplete="off" id="end-date">
                                </div>
                                <button class="btn btn-secondary" @onclick="OnSearchDateFilteredItem">

                                    @if (isDateFilterActive)
                                    {
                                        <i class="fa-solid fa-xmark"></i>
                                    }
                                    else
                                    {
                                        <i class="fa-solid fa-magnifying-glass"></i>
                                    }

                                </button>
                            </div>
                        </div>


                        @if (inventorySummary != null)
                        {
                            <div class="col count-item text-end">
                                @{
                                    int startItemIndex = (inventorySummary.IsInPage - 1) * inventorySummary.ItemPerPage + 1;
                                    int endItemIndex = (startItemIndex - 1) + inventorySummary.Models.Count;
                                    string displayText = $"Showing {startItemIndex}-{endItemIndex} out of {inventorySummary.TotalItems}";
                                }
                                @displayText
                            </div>
                        }

                    </div>

                    <div class="table-wrapper">
                        <table class="table">

                            <thead>
                                <tr>
                                    <th scope="col"></th>

                                    <th scope="col" @onclick="(() => OnSortChange('l')) " class="sortable
                                        @((selectedSortValue == OrderInventorySummaryBy.LocationAsc) ? "" : "asc")
                                        @((selectedSortValue == OrderInventorySummaryBy.LocationAsc ||
                                         selectedSortValue == OrderInventorySummaryBy.LocationDesc ) ? "active" : "")  ">
                                        Location
                                    </th>

                                    <th scope="col" @onclick="(() => OnSortChange('p')) " class="sortable
                                        @((selectedSortValue == OrderInventorySummaryBy.ProductNameAsc) ? "" : "asc")
                                        @((selectedSortValue == OrderInventorySummaryBy.ProductNameAsc ||
                                         selectedSortValue == OrderInventorySummaryBy.ProductNameDesc ) ? "active" : "")  ">
                                        Product Name
                                    </th>

                                    <th scope="col">SKU</th>

                                    <th scope="col" @onclick="(() => OnSortChange('r')) " class="sortable
                                        @((selectedSortValue == OrderInventorySummaryBy.StockRemainAsc) ? "" : "asc")
                                        @((selectedSortValue == OrderInventorySummaryBy.StockRemainAsc ||
                                         selectedSortValue == OrderInventorySummaryBy.StockRemainDesc ) ? "active" : "")  ">
                                        Stock Remain
                                    </th>

                                    <th scope="col" @onclick="(() => OnSortChange('d')) " class="sortable
                                        @((selectedSortValue == OrderInventorySummaryBy.PurchasedDateAsc) ? "" : "asc")
                                        @((selectedSortValue == OrderInventorySummaryBy.PurchasedDateAsc ||
                                         selectedSortValue == OrderInventorySummaryBy.PurchasedDateDesc ) ? "active" : "")  ">
                                        Purchased Date
                                    </th>

                                    <th scope="col" @onclick="(() => OnSortChange('e')) " class="sortable
                                        @((selectedSortValue == OrderInventorySummaryBy.ExpiryDateAsc) ? "" : "asc")
                                        @((selectedSortValue == OrderInventorySummaryBy.ExpiryDateAsc ||
                                         selectedSortValue == OrderInventorySummaryBy.ExpiryDateDesc ) ? "active" : "")  ">
                                        Expiry Date
                                    </th>

                                    <th scope="col">Status</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>

                            <tbody>

                                @if (inventorySummary != null)
                                {
                                    @foreach (var item in inventorySummary.Models)
                                    {
                                        <tr>
                                            <td scope="row">
                                                <span></span>
                                            </td>

                                            <td>
                                                @item.Location
                                            </td>
                                            <td class="td-name">@item.ProductName</td>
                                            <td>#@item.SKU</td>
                                            <td>@item.StockRemain</td>
                                            <td class="td-date">
                                                <i class="fa-regular fa-clock"></i>
                                                @item.PurchasedDate.ToLocalTime().ToString("MM-dd-yy")
                                            </td>
                                            <td class="td-date">
                                                <i class="fa-regular fa-clock"></i>
                                                @item.ExpiryDate.ToLocalTime().ToString("MM-dd-yy")
                                            </td>
                                            <td>

                                                @{
                                                    var isItemAvailable = item.IsProductAvailable ? item.IsAvailable : false;
                                                }

                                                <div class="form-check form-switch">
                                                    <input class="form-check-input"
                                                   type="checkbox" checked="@(isItemAvailable)" @onchange="@(() =>
                                                        OnAvailabilityChange(item.Id, item.IsAvailable))"
                                                   disabled="@(!item.IsProductAvailable)">
                                                </div>

                                            </td>
                                            <td>
                                                <div class="table-icons">
                                                    <i class="fa-solid fa-pencil" data-bs-toggle="modal"
                                               data-bs-target="#inventoryModalEdit"
                                               @onclick="@(() => OpenStockAdjustmentModal(item.Id))"></i>

                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }

                            </tbody>

                        </table>


                        @if (inventorySummary == null)
                        {
                            <div class="no-item">

                                @if (isLoading)
                                {
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                                else
                                {
                                    <h6>No Product has been loaded.</h6>
                                }
                            </div>
                        }

                    </div>

                    <Pagination CurrentPage="@currentPage"
                                PageCount="@totalPages"
                                OnPageChanged="OnHandlePageChange" />
                </div>

            </div>
        </div>
        <!-- End Panel 1 -->
        <!-- Start Panel 2 -->
        <div class="app-panel" id="panel2" style="display: none;">
        </div>
        <!-- End Panel 2 -->


    </div>
</div>

<StockEntry OnSave="OnSaveModal" />
<StockAdjustment @ref="stockAdjustment" OnSave="OnSaveModal" />

<HttpErrorPopUp @ref="HttpErrorHandler" />

@code {
    private HttpErrorPopUp? HttpErrorHandler = new();
    private RequestModel<InventorySummaryDTO>? inventorySummary;
    private RequestInventoryPageDTO inventoryRequestDTO = new();
    private int totalPages = 1;
    private int currentPage = 1;
    private bool isLoading = true;

    private OrderInventorySummaryBy selectedSortValue;
    private StockAdjustment? stockAdjustment;

    private bool isDateFilterActive = false;
    private string startDateText = "";
    private string endDateText = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string? sku { get; set; }

    protected override async Task OnInitializedAsync()
    {
        inventoryRequestDTO.PageNo = 1;
        inventoryRequestDTO.Sku = sku;
        inventoryRequestDTO.ItemPerPage = int.Parse(Config["AppSettings:itemPerPage"] ?? "10");
        await RequestItems(currentPage, selectedSortValue);
        await JSRuntime.InvokeVoidAsync("SetDatePickerSetting");
    }

    private async Task RequestItems(int page, OrderInventorySummaryBy orderBy)
    {
        inventoryRequestDTO.PageNo = page;
        inventoryRequestDTO.OrderBy = (int)orderBy;
        isLoading = true;

        inventorySummary = (await InventoryEndpoint
        .GetInventorySummary(inventoryRequestDTO))?.Data;

        if (inventorySummary != null)
        {
            totalPages = inventorySummary.TotalPages;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSearchItem(ChangeEventArgs e)
    {
        currentPage = 1;
        string? searchFor = e?.Value?.ToString();
        inventoryRequestDTO.Sku = null;
        inventoryRequestDTO.LookFor = VerifySearchBar(searchFor);
        await RequestItems(currentPage, selectedSortValue);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("DateChange", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task HandleChangeDateEvent()
    {
        if (isDateFilterActive)
            await SearchFilteredItem();
    }

    private async Task OnSearchDateFilteredItem()
    {
        if (isDateFilterActive)
        {
            startDateText = "";
            endDateText = "";
            isDateFilterActive = false;
            inventoryRequestDTO.StartDate = null;
            inventoryRequestDTO.EndDate = null;
            currentPage = 1;
            await RequestItems(currentPage, selectedSortValue);
            StateHasChanged();
        }
        else
        {
            isDateFilterActive = true;
            await SearchFilteredItem();
        }
    }

    private async Task SearchFilteredItem()
    {
        startDateText = await JSRuntime.InvokeAsync<string>("getDateValue", "start-date");
        endDateText = await JSRuntime.InvokeAsync<string>("getDateValue", "end-date");

        DateTime startDate;
        DateTime endDate;

        if (DateTime.TryParseExact(startDateText, "MMM d, yyyy",
        CultureInfo.InvariantCulture, DateTimeStyles.None, out startDate) &&
        DateTime.TryParseExact(endDateText, "MMM d, yyyy",
        CultureInfo.InvariantCulture, DateTimeStyles.None, out endDate))
        {
            inventoryRequestDTO.StartDate = startDate.ToUniversalTime();
            inventoryRequestDTO.EndDate = endDate.ToUniversalTime();
            isDateFilterActive = true;

            currentPage = 1;
            await RequestItems(currentPage, selectedSortValue);
        }
    }

    private async Task OnHandlePageChange(int page)
    {
        currentPage = page;
        await RequestItems(page, selectedSortValue);
    }

    private async Task OnSortChange(char sortBy)
    {
        switch (sortBy)
        {
            case 'l':
                selectedSortValue = selectedSortValue == OrderInventorySummaryBy.LocationAsc ?
                OrderInventorySummaryBy.LocationDesc : OrderInventorySummaryBy.LocationAsc;
                break;

            case 'p':
                selectedSortValue = selectedSortValue == OrderInventorySummaryBy.ProductNameAsc ?
                OrderInventorySummaryBy.ProductNameDesc : OrderInventorySummaryBy.ProductNameAsc;
                break;

            case 'r':
                selectedSortValue = selectedSortValue == OrderInventorySummaryBy.StockRemainAsc ?
                OrderInventorySummaryBy.StockRemainDesc : OrderInventorySummaryBy.StockRemainAsc;
                break;

            case 'd':
                selectedSortValue = selectedSortValue == OrderInventorySummaryBy.PurchasedDateAsc ?
                OrderInventorySummaryBy.PurchasedDateDesc : OrderInventorySummaryBy.PurchasedDateAsc;
                break;

            case 'e':
                selectedSortValue = selectedSortValue == OrderInventorySummaryBy.ExpiryDateAsc ?
                OrderInventorySummaryBy.ExpiryDateDesc : OrderInventorySummaryBy.ExpiryDateAsc;
                break;

            default:
                selectedSortValue = selectedSortValue == OrderInventorySummaryBy.LocationAsc ?
                OrderInventorySummaryBy.LocationDesc : OrderInventorySummaryBy.LocationAsc;
                break;
        }


        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnAvailabilityChange(int Id, bool status)
    {
        var getInventory = (await InventoryEndpoint.GetById(Id))?.Data;
        bool toggle = status ? false : true;

        if (getInventory != null)
        {
            getInventory.IsAvailable = toggle;

            var result = await InventoryEndpoint.ToggleInventory(getInventory);

            if (result != null && result.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("SuccessToast", result.ReasonPhrase);
                await RequestItems(1, selectedSortValue);
            }

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<InventoryModel>(result);
        }

    }

    private async Task OpenStockAdjustmentModal(int id)
    {
        if (stockAdjustment != null)
            await stockAdjustment.OnOpen((await InventoryEndpoint.GetById(id))?.Data);
    }

    private async Task OnSaveModal()
    {
        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private string? VerifySearchBar(string? str) =>
    string.IsNullOrWhiteSpace(str) ? null : str;

}
