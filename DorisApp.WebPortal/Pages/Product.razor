@page "/products"
@inject ProductEndpoint ProductEndpoint
@inject IJSRuntime JSRuntime
@inject IConfiguration Config

<div class="product-page-content">

    <!-- Start Panel 1 -->
    <div class="app-panel" id="panel1" style="opacity:1; display: flex;">

        <div class="container-fluid">

            <div class="row align-items-end">
                <div class="col ">
                    <h3 class="table-title">List of Products</h3>
                </div>

                <div class="col ">
                    <button type="button" id="openPanel2Btn" class="add-btn btn btn-gradient-primary" @onclick="OpenAddProductForm">
                        <i class="fa-regular fa-circle-plus"></i>
                        Add
                    </button>
                </div>

            </div>

            <div class="table-card">

                <div class="row ">
                    <div class="col-md  d-flex">
                        <div class="search-bar">
                            <input type="search" class="form-control" placeholder="Search..." @oninput="OnSearchItem">
                        </div>

                        <div class="sort-select">
                            <label for="sort-table">Sort by:</label>

                            <select class="form-select form-select-sm"
                                    @onchange="OnSelectSortChange">
                                <option value="@OrderBrandSummaryBy.NameAcs">Name A-Z</option>
                                <option value="@OrderBrandSummaryBy.NameDesc">Name Z-A</option>
                            </select>

                        </div>
                    </div>

                </div>

                <div class="table-wrapper">
                    <table class="table">

                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Image</th>
                                <th scope="col">Product Name</th>
                                <th scope="col">SKU</th>
                                <th scope="col">Brand</th>
                                <th scope="col">Stock</th>
                                <th scope="col">Inventory</th>
                                <th scope="col">Available</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>


                        @if (productSummary != null)
                        {
                            @foreach (var item in productSummary.Models)
                            {

                                <tbody>
                                    <tr>
                                        <td scope="row">
                                            <span></span>
                                        </td>

                                        @{
                                            var url = @Config["URL:apiUrl"]
                                            + "/api/file/get/product/"
                                            + @item.StoredImageName;
                                        }

                                        <td>
                                            <img src="@url" alt="product">
                                        </td>

                                        <td>@item.ProductName</td>
                                        <td>#@item.Sku</td>
                                        <td class="@((@item.BrandName.Contains("*")) ? "text-danger" : "")">
                                            @item.BrandName.Replace("*", "")
                                        </td>

                                        <td class="@((int.Parse(Config["AppSettings:StockWaring"]?? "10"))
                                                    >= @item.TotalStock ? "text-danger" : "")">
                                            @item.TotalStock
                                        </td>

                                        <td>
                                            <a class="@((int.Parse(Config["AppSettings:StockWaring"]?? "10"))
                                                    >= @item.TotalStock ? "stock-warning" : "")">
                                                @item.InventoryCount on hand
                                            </a>
                                        </td>

                                        <td>
                                            <div class="form-check form-switch">
                                                <input class="form-check-input"
                                               type="checkbox" checked="@(item.IsAvailable)" @onchange="@(() => OnAvailabilityChange(item.Id, item.IsAvailable))">
                                            </div>
                                        </td>

                                        <td>
                                            <div class="table-icons">

                                                <i class="fa-solid fa-pencil"
                                                @onclick="@(() => OpenEditProductForm(item.Id))"></i>

                                                <i class="fa-solid fa-xmark" data-bs-toggle="modal"
                                           data-bs-target="#productModal"
                                                @onclick="@(() => DeleteProduct(item.Id))"></i>

                                            </div>
                                        </td>

                                    </tr>
                                </tbody>
                            }
                        }

                    </table>

                    @if (productSummary == null)
                    {
                        <div class="no-item">

                            @if (isLoading)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <h6>No Product has been loaded.</h6>
                            }
                        </div>
                    }

                </div>

                <Pagination CurrentPage="@currentPage"
                            PageCount="@totalPages"
                            OnPageChanged="OnHandlePageChange" />

            </div>

        </div>

    </div>
    <!-- End Panel 1 -->
    <!-- Start Panel 2 -->
    <div class="app-panel" id="panel2" style="display: none;">
        <ProductForm @ref="productForm" OnBack="OpenPanel1" />
    </div>
    <!-- End Panel 2 -->

</div>

<Modal @ref="modalComponentRef"
       modalId="productModal"
       Title="Delete Product"
       SaveButtonText="Save"
       modalMode="delete"
       OnSave="OnSaveModal">
    <div>
        Are you sure you want to delete
        <b class="text-primary">@activeProductModel?.ProductName</b>?
    </div>
</Modal>

<HttpErrorPopUp @ref="HttpErrorHandler" />

@code {
    private HttpErrorPopUp? HttpErrorHandler = new();
    private RequestModel<ProductSummaryDTO>? productSummary;
    private RequestPageDTO productRequestDTO = new();
    private ProductModel? activeProductModel = new();
    private ProductForm? productForm = new();

    private int totalPages = 1;
    private int currentPage = 1;
    private bool isLoading = true;

    private Modal? modalComponentRef = new();


    private OrderProductSummaryBy selectedSortValue;

    protected async override Task OnInitializedAsync()
    {
        productRequestDTO.PageNo = 1;
        productRequestDTO.ItemPerPage = int.Parse(Config["AppSettings:itemPerPage"] ?? "10");
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task RequestItems(int page, OrderProductSummaryBy orderBy)
    {
        productRequestDTO.PageNo = page;
        productRequestDTO.OrderBy = (int)orderBy;
        isLoading = true;

        productSummary = (await ProductEndpoint.GetProductSummary(productRequestDTO))?.Data;

        if (productSummary != null)
        {
            totalPages = productSummary.TotalPages;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OpenPanel1()
    {
        await JSRuntime.InvokeVoidAsync("OpenPanel1");
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnSearchItem(ChangeEventArgs e)
    {
        currentPage = 1;
        string? searchFor = e?.Value?.ToString();
        productRequestDTO.LookFor = VerifySearchBar(searchFor);
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task OnSelectSortChange(ChangeEventArgs e)
    {
        selectedSortValue = (OrderProductSummaryBy)Enum
        .Parse(typeof(OrderProductSummaryBy), e?.Value?.ToString() ?? "0");

        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnHandlePageChange(int page)
    {
        currentPage = page;
        await RequestItems(page, selectedSortValue);
    }

    private async Task OnAvailabilityChange(int Id, bool status)
    {
        var getProduct = await GetProductById(Id);
        bool toggle = status ? false : true;

        if (getProduct != null)
        {
            getProduct.IsAvailable = toggle;

            var result = await ProductEndpoint.UpdateProduct(getProduct, null, null);

            if (result != null && result.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("SuccessToast",
                $"Succesfully update {getProduct.ProductName} status");
            }

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<List<ProductSummaryDTO>>(result);
        }

        activeProductModel = null;
    }

    private async Task OnSaveModal()
    {
        try
        {
            if (activeProductModel == null) throw new NullReferenceException("Null Product");
            var result = await ProductEndpoint.DeleteProduct(activeProductModel);

            if (result != null && result.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("SuccessToast",
               $"Successfully update {activeProductModel.ProductName}");
            }

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<ProductSummaryDTO>(result);
        }
        catch (Exception ex)
        {
            var result = new ResultDTO<ProductModel>
                {
                    ErrorCode = 1
                };

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<ProductModel>(result, ex.Message);
        }

        activeProductModel = null;
        modalComponentRef?.Close();
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task DeleteProduct(int Id)
    {
        activeProductModel = await GetProductById(Id);
    }

    private async Task OpenAddProductForm()
    {
        await JSRuntime.InvokeVoidAsync("OpenPanel2");
        if (productForm != null)
            productForm.AddNewProduct();
    }

    private async Task OpenEditProductForm(int Id)
    {
        await JSRuntime.InvokeVoidAsync("OpenPanel2");
        if (productForm != null)
            await productForm.EditProduct(Id); 
    }


    private async Task<ProductModel?> GetProductById(int Id) =>
    (await ProductEndpoint.GetById(Id))?.Data;

    private string? VerifySearchBar(string? str) =>
    string.IsNullOrWhiteSpace(str) ? null : str;
}