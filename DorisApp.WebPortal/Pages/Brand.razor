@page "/brands"
@inject BrandEndpoint BrandEndpoint
@inject IJSRuntime JSRuntime
@inject IConfiguration Config

<div class="brand-page-content">

    <div class="row">

        <div class="col-lg-9">

            <div class="row align-items-end">
                <div class="col ">
                    <h3 class="table-title">List of Brands</h3>
                </div>

                <div class="col ">
                    <button type="button" class="add-btn btn btn-gradient-primary " data-bs-toggle="modal"
                            data-bs-target="#brandModal" @onclick="OpenAddBrandModal">
                        <i class="fa-regular fa-circle-plus"></i>
                        Add
                    </button>
                </div>
            </div>

            <div class="table-card">

                <div class="table-card-header">
                    <div class="search-bar">
                        <input type="search" class="form-control" placeholder="Search..." @oninput="OnSearchItem">
                    </div>

                    @if (brandSummary != null)
                    {
                        <div class="count-item">
                            @{
                                int startItemIndex = (brandSummary.IsInPage - 1) * brandSummary.ItemPerPage + 1;
                                int endItemIndex = (startItemIndex - 1) + brandSummary.Models.Count;
                                string displayText = $"Showing {startItemIndex}-{endItemIndex} out of {brandSummary.TotalItems}";
                            }
                            @displayText
                        </div>
                    }
                </div>


                <div class="table-wrapper">
                    <table class="table">

                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Image</th>

                                <th scope="col" @onclick="(() => OnSortChange('b')) " class="sortable
                                        @((selectedSortValue == OrderBrandSummaryBy.NameAcs) ? "" : "asc")
                                        @((selectedSortValue == OrderBrandSummaryBy.NameAcs ||
                                         selectedSortValue == OrderBrandSummaryBy.NameDesc ) ? "active" : "")  ">
                                    Brand Name
                                </th>

                                <th scope="col" @onclick="(() => OnSortChange('c')) " class="sortable
                                        @((selectedSortValue == OrderBrandSummaryBy.ProductCountAcs) ? "" : "asc")
                                        @((selectedSortValue == OrderBrandSummaryBy.ProductCountAcs ||
                                         selectedSortValue == OrderBrandSummaryBy.ProductCountDesc ) ? "active" : "")">
                                    No. of Product
                                </th>

                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        @if (brandSummary != null)
                        {
                            @foreach (var item in brandSummary.Models)
                            {
                                <tbody>
                                    <tr>
                                        <td scope="row">
                                            <span></span>
                                        </td>

                                        @{
                                            var url = @Config["URL:apiUrl"]
                                            + "/api/file/get/brand/"
                                            + @item.StoredImageName;
                                        }

                                        <td>
                                            <img src="@url" alt="brand logo">
                                        </td>

                                        <td>@item.BrandName</td>
                                        <td>@item.ProductCount</td>

                                        <td>
                                            <div class="table-icons">

                                                <i class="fa-solid fa-pencil" data-bs-toggle="modal"
                                           data-bs-target="#brandModal"
                                           @onclick="@(() => OpenEditBrandModal(item.Id, url))"></i>

                                                <i class="fa-solid fa-xmark" data-bs-toggle="modal"
                                           data-bs-target="#brandModal"
                                           @onclick="@(() => OpenDeleteBrandModal(item.Id))"></i>

                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        }

                    </table>

                    @if (brandSummary == null)
                    {
                        <div class="no-item">

                            @if (isLoading)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <h6>No Brand has been loaded.</h6>
                            }
                        </div>
                    }

                </div>

                <Pagination CurrentPage="@currentPage"
                            PageCount="@totalPages"
                            OnPageChanged="OnHandlePageChange" />

            </div>

        </div>

        <div class="col-lg-3 d-flex justify-content-center align-content-center">

            NOTHING IN HERE?

        </div>

        <Modal @ref="modalComponentRef"
               modalId="brandModal"
               Title="@modalTitle"
               SaveButtonText="Save"
               modalMode="@modalMode"
               OnSave="OnSaveModal"
               OnClose="OnCloseModal">

            @if (modalMode != "delete")
            {
                <div class="card-description d-flex">

                    <p class="card-description text-justify">
                        This is where you can modify brands to your website.
                        Just fill out the form with the brand name, and an image for the brand.
                    </p>

                    <button type="button" class="btn btn-success import-btn"
                        data-bs-toggle="modal" data-bs-target="#importBrandModal">
                        <i class="fa-regular fa-file-spreadsheet"></i>
                        Import
                    </button>
                </div>

                <div class="row">


                    <EditForm Model="@modalModel" OnInvalidSubmit="@OnSaveModal">

                        <div class="col-sm">

                            <UploadImage @ref="uploadImageComponentRef"
                                     OnFileChange="OnHandleFileChange" MaxFileSize="@maxFileSize" />

                        </div>

                        <div class="col-sm">

                            <div class="mb-3 p-2">
                                <label for="brandName" class="form-label">Brand Name</label>
                                <InputText id="brandName" class="form-control" placeholder="Brand Name" @bind-Value="modalModel.BrandName" />
                                <ValidationMessage For="@(()=> modalModel.BrandName)" class="form-validation" />
                            </div>

                        </div>

                    </EditForm>
  
                </div>

            }
            else
            {
                <div>
                    Are you sure you want to delete
                    <b class="text-primary">@(modalModel.BrandName)</b>?
                </div>
            }

        </Modal>

    </div>

</div>

<ImportBrandModal/>

<HttpErrorPopUp @ref="HttpErrorHandler" />

@code {
    private HttpErrorPopUp? HttpErrorHandler = new();
    private RequestModel<BrandSummaryDTO>? brandSummary;
    private RequestPageDTO brandRequestDTO = new();
    private BrandModel modalModel = new();

    private UploadImage? uploadImageComponentRef = new();
    long maxFileSize = 1024 * 1024; // 1 MB in bytes
    private Stream? imgStream;
    private string? imgName;

    private int totalPages = 1;
    private int currentPage = 1;
    private bool isLoading = true;

    private Modal? modalComponentRef = new();
    private string modalTitle = string.Empty;
    private string modalMode = string.Empty;

    private OrderBrandSummaryBy selectedSortValue;

    protected async override Task OnInitializedAsync()
    {
        brandRequestDTO.PageNo = 1;
        brandRequestDTO.ItemPerPage = int.Parse(Config["AppSettings:itemPerPage"] ?? "10");
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task RequestItems(int page, OrderBrandSummaryBy orderBy)
    {
        brandRequestDTO.PageNo = page;
        brandRequestDTO.OrderBy = (int)orderBy;
        isLoading = true;

        brandSummary = (await BrandEndpoint.GetBrandSummary(brandRequestDTO))?.Data;

        if (brandSummary != null)
        {
            totalPages = brandSummary.TotalPages;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSearchItem(ChangeEventArgs e)
    {
        currentPage = 1;
        string? searchFor = e?.Value?.ToString();
        brandRequestDTO.LookFor = VerifySearchBar(searchFor);
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task OnSortChange(char sortBy)
    {

        switch (sortBy)
        {
            case 'b':
                selectedSortValue = selectedSortValue == OrderBrandSummaryBy.NameAcs ?
                OrderBrandSummaryBy.NameDesc : OrderBrandSummaryBy.NameAcs;
                break;

            case 'c':
                selectedSortValue = selectedSortValue == OrderBrandSummaryBy.ProductCountAcs ?
                OrderBrandSummaryBy.ProductCountDesc : OrderBrandSummaryBy.ProductCountAcs;
                break;

            default:
                selectedSortValue = selectedSortValue == OrderBrandSummaryBy.NameAcs ?
                OrderBrandSummaryBy.NameDesc : OrderBrandSummaryBy.NameAcs;
                break;
        }


        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnHandlePageChange(int page)
    {
        currentPage = page;
        await RequestItems(page, selectedSortValue);
    }

    private async Task OnHandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            imgName = e.File.Name;
            imgStream = e.File.OpenReadStream(maxFileSize);
        }
        catch
        {
            if (uploadImageComponentRef != null)
                await uploadImageComponentRef.RemoveActiveImage();
            StateHasChanged();
        }
    }

    private async Task OnSaveModal()
    {
        if (modalMode == "add")
        {
            await AddBrand();
        }
        else if (modalMode == "edit")
        {
            await EditBrand();
        }
        else if (modalMode == "delete")
        {
            await DeleteBrand();
        }
    }

    private async Task OnCloseModal()
    {
        imgStream = null;
        imgName = null;
        modalModel.BrandName = "";

        if (uploadImageComponentRef != null && modalMode != "delete")
            await uploadImageComponentRef.RemoveActiveImage();

        await RequestItems(currentPage, selectedSortValue);
    }

    private void OpenAddBrandModal()
    {
        modalTitle = "Add New Brand";
        modalMode = "add";
        modalModel.BrandName = string.Empty;
        modalModel.Id = 0;
    }

    private async Task OpenEditBrandModal(int id, string url)
    {
        modalTitle = "Edit Brand";
        modalMode = "edit";

        if (uploadImageComponentRef != null)
            await uploadImageComponentRef.SetActiveImage(url);

        SetModalModel(id);
    }

    private void OpenDeleteBrandModal(int id)
    {
        modalTitle = "Delete Branddal";
        modalMode = "delete";
        SetModalModel(id);
    }

    private async Task AddBrand()
    {
        try
        {
            var brand = new BrandModel
            {
                BrandName = modalModel.BrandName
            };

            var result = await BrandEndpoint.AddBrandAsync(brand, imgStream, imgName);

            if (result != null && result.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("SuccessToast",
               $"Successfully added {modalModel.BrandName}");
            }

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<BrandModel>(result);

        }
        catch (Exception ex)
        {
            await CatchError(ex.Message);
        }
        modalComponentRef?.Close();
    }

    private async Task EditBrand()
    {
        try
        {
            var brand = new BrandModel
                {
                    Id = modalModel.Id,
                    BrandName = modalModel.BrandName
                };

            var result = await BrandEndpoint.UpdateBrand(brand, imgStream, imgName);

            if (result != null && result.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("SuccessToast",
               $"Successfully update {modalModel.BrandName}");
            }

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<List<BrandSummaryDTO>>(result);
        }
        catch (Exception ex)
        {
            await CatchError(ex.Message);
        }

        modalComponentRef?.Close();
    }

    private async Task DeleteBrand()
    {
        try
        {
            var brand = new BrandModel
            {
                Id = modalModel.Id,
                BrandName = modalModel.BrandName
            };

            var result = await BrandEndpoint.DeleteBrand(brand);

            if (result != null && result.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("WarningToast",
               $"Successfully remove {modalModel.BrandName}");
            }

            if (HttpErrorHandler != null)
                await HttpErrorHandler.HandleHttpErrors<BrandSummaryDTO>(result);
        }
        catch (Exception ex)
        {
            await CatchError(ex.Message);
        }

        modalComponentRef?.Close();
    }


    private void SetModalModel(int brandId)
    {
        var brand = brandSummary?.Models
        .FirstOrDefault(x => x.Id == brandId);

        if (brand != null)
        {
            modalModel.Id = brandId;
            modalModel.BrandName = brand.BrandName ?? "";
        }
        StateHasChanged();
    }

    private async Task CatchError(string exMessage)
    {
        var result = new ResultDTO<BrandSummaryDTO>
        {
            ErrorCode = 1,
            ReasonPhrase = exMessage
        };

        if (HttpErrorHandler != null)
            await HttpErrorHandler.HandleHttpErrors<BrandSummaryDTO>(result, exMessage);
    }

    private string? VerifySearchBar(string? str) =>
    string.IsNullOrWhiteSpace(str) ? null : str;
}
