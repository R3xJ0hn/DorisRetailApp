@page "/brands"
@inject BrandEndpoint BrandEndpoint
@inject IJSRuntime JSRuntime
@inject IConfiguration Config

<div class="brand-page-content">

    <div class="row">

        <div class="col-lg-9">

            <div class="row align-items-end">
                <div class="col ">
                    <h3 class="table-title">List of Brands</h3>
                </div>

                <div class="col ">
                    <button type="button" class="add-btn btn btn-gradient-primary " data-bs-toggle="modal"
                            data-bs-target="#brandModal" @onclick="OpenAddModal">
                        <i class="fa-regular fa-circle-plus"></i>
                        Add
                    </button>
                </div>
            </div>

            <div class="table-card">

                <div class="row ">
                    <div class="col-md  d-flex">
                        <div class="search-bar">
                            <input type="search" class="form-control" placeholder="Search..." @oninput="OnSearchItem">
                        </div>

                        <div class="sort-select">
                            <label for="sort-table">Sort by:</label>

                            <select class="form-select form-select-sm"
                                    @onchange="OnSelectSortChange">
                                <option value="@OrderBrandSummaryBy.NameAcs">Name A-Z</option>
                                <option value="@OrderBrandSummaryBy.NameDesc">Name Z-A</option>

                                <option value="@OrderBrandSummaryBy.ProductCountAcs">
                                    Product &#x2191;&#xFE0E;
                                </option>

                                <option value="@OrderBrandSummaryBy.ProductCountDesc">
                                    Product &#x2193;&#xFE0E;
                                </option>

                            </select>

                        </div>
                    </div>

                </div>

                <div class="table-wrapper">
                    <table class="table">

                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Image</th>
                                <th scope="col">Brand Name</th>
                                <th scope="col">No. of Product</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>

                        @if (brandSummary != null)
                        {
                            @foreach (var item in brandSummary.Models)
                            {
                                <tbody>
                                    <tr>
                                        <td scope="row">
                                            <span></span>
                                        </td>

                                            @{
                                                var url = @Config["URL:apiUrl"] 
                                                        + "/api/file/get/brand/"
                                                        + @item.StoredImageName;
                                            }

                                        <td>
                                            <img src="@url" alt="brand logo">
                                        </td>

                                        <td>@item.BrandName</td>
                                        <td>@item.ProductCount</td>

                                        <td>
                                            <div class="table-icons">

                                                <i class="fa-solid fa-pencil" data-bs-toggle="modal"
                                           data-bs-target="#brandModal"
                                           @onclick="@(() => OpenEditModal(item.Id, url))"></i>

                                                <i class="fa-solid fa-xmark" data-bs-toggle="modal"
                                           data-bs-target="#brandModal"
                                           @onclick="@(() => OpenDeleteModal(item.Id))"></i>

                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        }

                    </table>

                    @if (brandSummary == null)
                    {
                        <div class="no-item">

                            @if (isLoading)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <h6>No Brand has been loaded.</h6>
                            }
                        </div>
                    }

                </div>

                <Pagination CurrentPage="@currentPage"
                            PageCount="@totalPages"
                            OnPageChanged="OnHandlePageChange" />

            </div>
        </div>

        <div class="col-lg-3 d-flex justify-content-center align-content-center">

            NOTHING IN HERE?

        </div>

        <Modal modalId="brandModal"
               Title="@modalTitle"
               SaveButtonText="Save"
               modalMode="@modalMode"
               OnSave="OnOpenModal"
               OnClose="OnCloseModal">

            @if (modalMode != "delete")
            {

                @if (string.IsNullOrEmpty(errorMessage))
                {
                    <p class="card-description text-justify">
                        This is where you can modify brands to your website.
                        Just fill out the form with the brand name, and an image for the brand.
                    </p>
                }
                else
                {
                    <p class="card-description text-justify text-danger">
                        @errorMessage
                    </p>
                }

                <EditForm Model="@modalModel" OnInvalidSubmit="@OnOpenModal">
                    <DataAnnotationsValidator />

                    <UploadImage OnFileChange="OnHandleFileChange" MaxFileSize="@maxFileSize" ImgSource="@imgSourceEdit" />

                    <div class="mb-3 p-2">
                        <label for="brandName" class="form-label">Brand Name</label>
                        <InputText id="brandName" class="form-control" placeholder="Brand Name" @bind-Value="modalModel.BrandName" />
                        <ValidationMessage For="@(()=> modalModel.BrandName)" />
                    </div>

                </EditForm>
            }
            else
            {
                <div>
                    Are you sure you want to delete
                    <b class="text-primary">@(modalModel.BrandName)</b>?
                </div>
            }

        </Modal>

        <div class="toast-container position-fixed top-0 end-0 p-3">
            <Toast ToastId="brandToast" Message="@toastMessage" ToastMode="@toastMode" />
        </div>

    </div>

</div>

@code {
    private RequestModel<BrandSummaryDTO>? brandSummary;
    private RequestPageDTO brandRequestDTO = new();
    long maxFileSize = 1024 * 1024; // 1 MB in bytes
    private string? imgSourceEdit;
    private Stream? imgStream;
    private string? imgName;

    private int totalPages = 1;
    private int currentPage = 1;
    private bool isLoading = true;

    private BrandModel modalModel = new();
    private string modalTitle = string.Empty;
    private string modalMode = string.Empty;

    private string? errorMessage = null;
    private string toastMode = string.Empty;
    private string toastMessage = string.Empty;

    private OrderBrandSummaryBy selectedSortValue;

    protected async override Task OnInitializedAsync()
    {
        brandRequestDTO.PageNo = 1;
        brandRequestDTO.ItemPerPage = int.Parse(Config["AppSettings:itemPerPage"]);
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task RequestItems(int page, OrderBrandSummaryBy orderBy)
    {
        brandRequestDTO.PageNo = page;
        brandRequestDTO.OrderBy = (int)orderBy;
        isLoading = true;

        brandSummary = await BrandEndpoint
        .GetBrandSummary(brandRequestDTO);

        if (brandSummary != null)
        {
            totalPages = brandSummary.TotalPages;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSelectSortChange(ChangeEventArgs e)
    {
        selectedSortValue = (OrderBrandSummaryBy)Enum
        .Parse(typeof(OrderBrandSummaryBy), e.Value.ToString());

        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnSearchItem(ChangeEventArgs e)
    {
        currentPage = 1;
        string? searchFor = e.Value.ToString();
        brandRequestDTO.LookFor = VerifySearchBar(searchFor);
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task OnHandlePageChange(int page)
    {
        currentPage = page;
        await RequestItems(page, selectedSortValue);
    }

    private async Task OnHandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            imgName = e.File.Name;
            imgStream = e.File.OpenReadStream(maxFileSize);
        }
        catch (Exception)
        {
            errorMessage = "File size cannot exceed 1 MB.";
            await JSRuntime.InvokeVoidAsync("clearUploadValue");
            StateHasChanged();
        }

    }

    private async Task OnOpenModal()
    {

        if (modalMode == "add")
        {
            await AddBrand();
        }
        else if (modalMode == "edit")
        {
            await EditBrand();
        }
        else if (modalMode == "delete")
        {
            await DeleteBrand();
        }
    }

    private async Task OnCloseModal()
    {
        imgSourceEdit = null;
        await CloseModal(null, null);
    }

    private async Task AddBrand()
    {
        try
        {
            if (string.IsNullOrEmpty(modalModel.BrandName))
            {
                errorMessage = "Brand name is required.";
                await JSRuntime.InvokeVoidAsync("enableButtons");
                return;
            }

            await BrandEndpoint.AddBrandAsync(modalModel, imgStream, imgName);
            await CloseModal("Successfully added new brand.", "success");
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("enableButtons");
            errorMessage = $"Failed to add brand: {ex.Message}";
        }
    }

    private async Task EditBrand()
    {
        try
        {
            if (string.IsNullOrEmpty(modalModel.BrandName))
            {
                errorMessage = "Brand name is required.";
                return;
            }

            var brand = new BrandModel
            {
                Id = modalModel.Id,
                BrandName = modalModel.BrandName,
            };

            await BrandEndpoint.UpdateBrand(brand, imgStream, imgName);
            await CloseModal("Successfully updated brand.", "success");
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("enableButtons");
            errorMessage = $"Failed to update brand: {ex.Message}";
        }
    }

    private async Task DeleteBrand()
    {
        try
        {
            var brand = new BrandModel
            {
                Id = modalModel.Id,
                BrandName = modalModel.BrandName,
            };

            await BrandEndpoint.DeleteBrand(brand);
            await CloseModal($"{brand.BrandName} remove from brand.", "danger");
        }
        catch (HttpRequestException ex)
        {
            await CloseModal($"Error request: {ex.Message}", "danger");
            errorMessage = $"Failed to remove category: {ex.Message}";
        }
    }

    private async Task CloseModal(string toastmsg, string mode)
    {
        toastMessage = toastmsg;
        toastMode = mode;
        await JSRuntime.InvokeVoidAsync("modalProcessDone", "#brandModal");
        await JSRuntime.InvokeVoidAsync("setUploadImageToDeactive");

        if (mode != "danger")
        {
            await JSRuntime.InvokeVoidAsync("clearUploadValue");
        }

        if (toastmsg != null)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "#brandToast");
        }

        errorMessage = null;
        StateHasChanged();

        //Request for Update
        await RequestItems(currentPage, selectedSortValue);
    }

    private void OpenAddModal()
    {
        modalTitle = "Add New Brand";
        modalMode = "add";
        modalModel.BrandName = string.Empty;
        modalModel.Id = 0;
    }

    private async Task OpenEditModal(int id, string url)
    {
        modalTitle = "Edit Modal";
        modalMode = "edit";
        imgSourceEdit = url;

        if (!string.IsNullOrWhiteSpace(url))
        {
            await JSRuntime.InvokeVoidAsync("setUploadImageToActive");
        }

        SetModalModel(id);
    }

    private void OpenDeleteModal(int id)
    {
        modalTitle = "Delete Modal";
        modalMode = "delete";
        SetModalModel(id);
    }

    private void SetModalModel(int brandId)
    {
        var brand = brandSummary.Models.FirstOrDefault(x => x.Id == brandId);
        if (brand != null)
        {
            modalModel.BrandName = brand.BrandName;
            modalModel.Id = brandId;
        }
        StateHasChanged();
    }

    private string? VerifySearchBar(string? str) =>
    string.IsNullOrWhiteSpace(str) ? null : str;
}
