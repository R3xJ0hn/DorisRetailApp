@page "/category/categories"
@inject CategoryEndpoint CategoryEndpoint
@inject IJSRuntime JSRuntime
@inject IConfiguration Config

<div class="category-page-content">

    <div class="row">

        <div class="col-lg-9">

            <div class="row align-items-end">
                <div class="col ">
                    <h3 class="table-title">List of Categories</h3>
                </div>

                <div class="col ">
                    <button type="button" class="add-btn btn btn-gradient-primary " data-bs-toggle="modal"
                            data-bs-target="#categoryModal" @onclick="OpenAddCategoryModal">
                        <i class="fa-regular fa-circle-plus"></i>
                        Add
                    </button>
                </div>
            </div>

            <div class="table-card">

                <div class="row ">
                    <div class="col-md  d-flex">
                        <div class="search-bar">
                            <input type="search" class="form-control" placeholder="Search..." @oninput="OnSearchItem">
                        </div>

                        <div class="sort-select">
                            <label for="sort-table">Sort by:</label>

                            <select class="form-select form-select-sm"
                                    @onchange="OnSelectSortChange">
                                <option value="@OrderCategorySummaryBy.NameAcs">Name A-Z</option>
                                <option value="@OrderCategorySummaryBy.NameDesc">Name Z-A</option>

                                <option value="@OrderCategorySummaryBy.ProductCountAcs">
                                    Product &#x2191;&#xFE0E;
                                </option>

                                <option value="@OrderCategorySummaryBy.ProductCountDesc">
                                    Product &#x2193;&#xFE0E;
                                </option>

                                <option value="@OrderCategorySummaryBy.SubCategoryCountAcs">
                                    SubCategory &#x2191;&#xFE0E;
                                </option>

                                <option value="@OrderCategorySummaryBy.SubCategoryCountDesc">
                                    SubCategory &#x2193;&#xFE0E;
                                </option>
                            </select>

                        </div>
                    </div>

                </div>

                <div class="table-wrapper">
                    <table class="table">

                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Category Name</th>
                                <th scope="col">No. of Sub Categories</th>
                                <th scope="col">No. of Product</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>

                        @if (categorySummary != null)
                        {
                            @foreach (var item in categorySummary.Models)
                            {
                                <tbody>
                                    <tr>
                                        <td scope="row">
                                            <span></span>
                                        </td>
                                        <td>@item.CategoryName</td>
                                        <td>@item.SubcategoryCount</td>
                                        <td>@item.ProductCount</td>
                                        <td>
                                            <div class="table-icons">

                                                <i class="fa-solid fa-pencil" data-bs-toggle="modal"
                                           data-bs-target="#categoryModal"
                                           @onclick="@(() => OpenEditCategoryModal(item.Id))"></i>

                                                <i class="fa-solid fa-xmark" data-bs-toggle="modal"
                                           data-bs-target="#categoryModal"
                                           @onclick="@(() => OpenDeleteCategoryModal(item.Id))"></i>

                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        }

                    </table>

                    @if (categorySummary == null)
                    {
                        <div class="no-item">
                            @if (isLoading)
                            {
                                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <h6>No Category has been loaded.</h6>
                            }
                        </div>
                    }
                </div>

                <Pagination CurrentPage="@currentPage"
                            PageCount="@totalPages"
                            OnPageChanged="OnHandlePageChange" />


            </div>
        </div>


        <div class="col-lg-3 d-flex justify-content-center align-content-center">

            NOTHING IN HERE?

        </div>

    </div>

</div>

<Modal modalId="categoryModal"
       Title="@modalTitle"
       SaveButtonText="Save"
       modalMode="@modalMode"
       OnSave="OnSaveModal">

    @if (modalMode != "delete")
    {
        @if (string.IsNullOrEmpty(errorMessage))
        {
            <p class="card-description text-justify">
                This is where you can modify your category list for your website.
                Just fill out the form with the category name.
            </p>
        }
        else
        {
            <p class="card-description text-justify text-danger">
                @errorMessage
            </p>
        }

        <EditForm Model="@modalModel" OnInvalidSubmit="@OnSaveModal">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="categoryName" class="form-label">Category Name</label>
                <InputText id="categoryName" class="form-control" placeholder="Category Name" @bind-Value="modalModel.CategoryName" />
                <ValidationMessage For="@(()=> modalModel.CategoryName)" class="form-validation" />

            </div>

        </EditForm>
    }
    else
    {
        <div>
            Are you sure you want to delete
            <b class="text-primary">@(modalModel.CategoryName)</b>?
        </div>
    }

</Modal>

<div class="toast-container position-fixed top-0 end-0 p-3">
    <Toast ToastId="categoryToast" Message="@toastMessage" ToastMode="@toastMode" />
</div>

@code {
    private RequestModel<CategorySummaryDTO>? categorySummary;
    private RequestPageDTO categoryRequestDTO = new();

    private bool isLoading = true;
    private int totalPages = 1;
    private int currentPage = 1;

    private CategoryModel modalModel = new();
    private string modalTitle = string.Empty;
    private string modalMode = string.Empty;

    private string errorMessage = string.Empty;
    private string toastMessage = string.Empty;
    private string toastMode = string.Empty;


    private OrderCategorySummaryBy selectedSortValue;

    protected override async Task OnInitializedAsync()
    {
        categoryRequestDTO.PageNo = 1;
        categoryRequestDTO.ItemPerPage = int.Parse(Config["AppSettings:itemPerPage"]);
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task RequestItems(int page, OrderCategorySummaryBy orderBy)
    {
        categoryRequestDTO.PageNo = page;
        categoryRequestDTO.OrderBy = (int)orderBy;
        isLoading = true;

        categorySummary = await CategoryEndpoint
        .GetCategorySummary(categoryRequestDTO);

        if (categorySummary != null)
        {
            totalPages = categorySummary.TotalPages;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSearchItem(ChangeEventArgs e)
    {
        currentPage = 1;
        string? searchFor = e.Value.ToString();
        categoryRequestDTO.LookFor = VerifySearchBar(searchFor);
        await RequestItems(currentPage, selectedSortValue);
    }

    private async Task OnSelectSortChange(ChangeEventArgs e)
    {
        selectedSortValue = (OrderCategorySummaryBy)Enum
        .Parse(typeof(OrderCategorySummaryBy), e.Value.ToString());

        currentPage = 1;
        await RequestItems(1, selectedSortValue);
    }

    private async Task OnHandlePageChange(int page)
    {
        currentPage = page;
        await RequestItems(page, selectedSortValue);
    }

    private async Task OnSaveModal()
    {
        if (modalMode == "add")
        {
            await AddCategory();
        }
        else if (modalMode == "edit")
        {
            await EditCategory();
        }
        else if (modalMode == "delete")
        {
            await DeleteCategory();
        }
    }

    private void OpenAddCategoryModal()
    {
        modalTitle = "Add New Category";
        modalMode = "add";
        modalModel.CategoryName = string.Empty;
        modalModel.Id = 0;
    }

    private void OpenEditCategoryModal(int categoryId)
    {
        modalTitle = "Edit Category";
        modalMode = "edit";
        SetModalModel(categoryId);
    }

    private void OpenDeleteCategoryModal(int categoryId)
    {
        modalTitle = "Delete Category";
        modalMode = "delete";
        SetModalModel(categoryId);
    }

    private async Task AddCategory()
    {
        try
        {
            if (string.IsNullOrEmpty(modalModel.CategoryName))
            {
                errorMessage = "Category name is required.";
                await JSRuntime.InvokeVoidAsync("enableButtons");
                return;
            }

            var category = new CategoryModel
            {
                CategoryName = modalModel.CategoryName
            };

            await CategoryEndpoint.AddCategoryAsync(category);
            await CloseModal("Successfully added new category.", "success");
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("enableButtons");
            errorMessage = $"Failed to add category: {ex.Message}";
        }
    }

    private async Task EditCategory()
    {
        try
        {
            if (string.IsNullOrEmpty(modalModel.CategoryName))
            {
                errorMessage = "Category name is required.";
                return;
            }

            var categoryToUpdate = new CategoryModel
            {
                Id = modalModel.Id,
                CategoryName = modalModel.CategoryName
            };

            await CategoryEndpoint.UpdateCategory(categoryToUpdate);
            await CloseModal("Successfully updated category.", "success");
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("enableButtons");
            errorMessage = $"Failed to update category: {ex.Message}";
        }
    }

    private async Task DeleteCategory()
    {
        try
        {
            var category = new CategoryModel
            {
                Id = modalModel.Id,
                CategoryName = modalModel.CategoryName
            };

            await CategoryEndpoint.DeleteCategory(category);
            await CloseModal($"{category.CategoryName} remove from category.", "danger");
        }
        catch (HttpRequestException ex)
        {
            await CloseModal($"Error request: {ex.Message}", "danger");
            errorMessage = $"Failed to remove category: {ex.Message}";
        }
    }


    private async Task CloseModal(string toastmsg, string mode)
    {
        toastMessage = toastmsg;
        toastMode = mode;
        await JSRuntime.InvokeVoidAsync("modalProcessDone", "#categoryModal");

        if (toastmsg != null)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "#categoryToast");
        }

        //Request for Update
        await RequestItems(currentPage, selectedSortValue);
    }

    private void SetModalModel(int categoryId)
    {
        var categoryToEdit = categorySummary.Models
        .FirstOrDefault(x => x.Id == categoryId);

        if (categoryToEdit != null)
        {
            modalModel.Id = categoryId;
            modalModel.CategoryName = categoryToEdit.CategoryName;
        }
    }

    private string? VerifySearchBar(string? str) =>
    string.IsNullOrWhiteSpace(str) ? null : str;

}